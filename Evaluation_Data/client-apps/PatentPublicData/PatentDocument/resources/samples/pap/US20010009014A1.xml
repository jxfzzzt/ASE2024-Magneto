<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v15-2001-01-31.dtd" [
<!ENTITY US20010009014A1-20010719-D00001.TIF SYSTEM "US20010009014A1-20010719-D00001.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00002.TIF SYSTEM "US20010009014A1-20010719-D00002.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00003.TIF SYSTEM "US20010009014A1-20010719-D00003.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00004.TIF SYSTEM "US20010009014A1-20010719-D00004.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00005.TIF SYSTEM "US20010009014A1-20010719-D00005.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00006.TIF SYSTEM "US20010009014A1-20010719-D00006.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00007.TIF SYSTEM "US20010009014A1-20010719-D00007.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00008.TIF SYSTEM "US20010009014A1-20010719-D00008.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00009.TIF SYSTEM "US20010009014A1-20010719-D00009.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00010.TIF SYSTEM "US20010009014A1-20010719-D00010.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00011.TIF SYSTEM "US20010009014A1-20010719-D00011.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00012.TIF SYSTEM "US20010009014A1-20010719-D00012.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00013.TIF SYSTEM "US20010009014A1-20010719-D00013.TIF" NDATA TIF>
<!ENTITY US20010009014A1-20010719-D00014.TIF SYSTEM "US20010009014A1-20010719-D00014.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20010009014</doc-number>
<kind-code>A1</kind-code>
<document-date>20010719</document-date></document-id>
<publication-filing-type>new-utility</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09777392</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010205</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>204000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>227000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Facilitating real-time, multi-point communications over the internet</title-of-invention>
</technical-information>
<continuity-data>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>09777392</doc-number>
<kind-code>A1</kind-code>
<document-date>20010205</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09432885</doc-number>
<document-date>19991102</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</division-of>
<continuations>
<continuation-in-part-of>
<parent-child>
<child>
<document-id>
<doc-number>09432885</doc-number>
<document-date>19991102</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09312927</doc-number>
<document-date>19990517</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>ABANDONED</parent-status>
</parent-child>
</continuation-in-part-of>
</continuations>
<non-provisional-of-provisional>
<document-id>
<doc-number>60128037</doc-number>
<document-date>19990406</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>James</given-name>
<middle-name>A.</middle-name>
<family-name>Savage</family-name>
<name-suffix>III</name-suffix>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Sophie</given-name>
<family-name>Muller</family-name>
</name>
<residence>
<residence-us>
<city>Palo Alto</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Cooley Godward LLP</name-1>
<name-2>Attn: Patent Group</name-2>
<address>
<address-1>Five Palo Alto Square</address-1>
<address-2>3000 El Camino Real</address-2>
<city>Palo Alto</city>
<state>CA</state>
<postalcode>94306-2155</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Methods and apparatus are described for facilitating a first conference between a plurality of clients on a network. A request to join a first conference is received from a first one of the plurality of clients via the network. In response to the request, it is determined whether the first conference is currently being facilitated on any of a plurality of media servers. Where the first conference is currently being facilitated on a first one of the plurality of media servers, the first client is dispatched to the first conference on the first media server. Where the first conference is not currently being facilitated on any of the plurality of media servers, creation of the first conference on a second one of the plurality of media servers is triggered, and the first client is dispatched to the first conference on the second media server. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATION DATA </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present application is a continuation-in-part of U.S. Pat. application Ser. No. 09/312,927 for FACILITATING REAL-TIME, MULTI-POINT COMMUNICATIONS OVER THE INTERNET filed on May 17, <highlight><bold>1999</bold></highlight>, which claims priority from U.S. Provisional application Ser. No. 60/128,037 for FACILITATING REAL-TIME, MULTI-POINT COMMUNICATIONS OVER THE INTERNET filed on Apr. 6, 1999, the entireties of which are incorporated herein by reference for all purposes. </paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to the transmission of data among entities on a network. More specifically, the present invention relates to real-time, multi-point communication among remote clients on the Internet. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Currently, a tremendous amount of capital and engineering expertise is being applied to the problem of providing real-time audio and video communication between and among remote locations over the Internet. However, at the present time there are virtually no adequate solutions for providing the kind of reliable, high quality communications to which consumers have become accustomed, i.e., communication over the dedicated connections of the public telephone infrastructure. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In fact, a significant portion of the problems associated with most Internet telephony applications is directly related to the fact that the link between the two communicating clients is not dedicated. That is, because the connections between the two clients are shared with a variety of other Internet traffic, there is, more often than not, a noticeable degradation in signal quality which results from the unpredictable and erratic traffic conditions of the Internet. The problem is exacerbated by the fact that, even with sophisticated data compression technology, audio and video data require a significant amount of bandwidth. Audio requires roughly 100 times the bandwidth required for text data, and the amount of bandwidth required for video is further orders of magnitude beyond audio. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Many Internet service providers (ISPs) and portals as well as entertainment and e-commerce web sites already provide a form of communication among remote clients which attempts to simulate real-time communication and have done so for some time. This form of communication is commonly referred to as a &ldquo;chat room.&rdquo; An ISP or portal provides an HTML link to a web page in which users may view text comments from other users and post text comments of their own in response. A chat room is typically implemented by dedicating a portion of a server owned and maintained by the ISP or portal to the handling and transmission of the text comments for all users currently viewing the corresponding page. Another similar form of communication provided by many ISPs and portals is referred to as &ldquo;instant messaging&rdquo; in which a user may send a text message to another user currently on-line with the same ISP. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The implementation of text messaging and chat rooms is relatively straightforward and reliable largely due to the fact that text messages require very little bandwidth and that there are no substantial latency issues related to the actual transmission of such messages. That is, due to the nature of text messages, traffic conditions do not result in delay or degradation which is noticeable from the user&apos;s perspective. Unfortunately, it is the nature of text communication which makes it so unsatisfactory a medium when compared with real-time audio and/or video communication. That is, communication by text is characterized by long delays in which the communicants must manually type their messages, and because of which messages often cross on the network. This often results in confusing exchanges with one or the other of the users eventually suggesting that the conversation recommence on a more reliable medium, e.g., the phone. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Moreover, the model according to which text communication is currently implemented is not applicable to audio or video communication because of the network traffic issues discussed above. Even if one were able to guarantee quality of service over the Internet, the bandwidth requirements of, for example, an audio chat room would not be amenable to the dedicated server approach currently employed. That is, a single text chat server can scale to thousands, even tens of thousands of users. However, because the bandwidth requirements of audio chat are roughly 100 times greater, a single server could only handle dozens (or at most a few hundred) users simultaneously. This is clearly inadequate given the user traffic of the large ISPs. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> To handle its anticipated chat room traffic, a large ISP could employ multiple chat servers, each server being dedicated to running one or more specific chat rooms. However, this approach presents a variety of other problems. First, because an ISP has no way of predicting chat room traffic, it is likely that situations would frequently arise in which, due to the popularity of particular chat rooms, the capacity of the corresponding servers would be exceeded, resulting in dropped packets, the exclusion of new users, or even entire chat rooms going off-line. This could be alleviated by providing sufficient excess capacity on each server, but this would result in an unacceptable inefficiency in the use of server resources. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Another problem with such an approach is that the number of servers required to accommodate audio chat for the chat room traffic of a typical ISP would be quite large. While this may be seen as a great benefit for manufacturers of server hardware, it is not a desirable solution for the ISP from either an economic or administrative view point. Not only would it be expensive for each ISP to purchase and maintain such a large number of servers, it would also increase the odds that specific chat rooms would be inaccessible to users. That is, each time a particular server went down (e.g., for routine maintenance or as a result of a fault) the chat rooms on that server would be inaccessible to users until the server was rebooted or replaced. Understandably, this is undesirable from the ISP&apos;s point of view. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> It is therefore desirable to provide high quality, real-time communication among a plurality of remote clients using a system which is scaleable to hundreds of thousands, even millions of users, and which dynamically allocates system resources to create and maintain communications among the clients. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to the present invention, a system is provided by which high-quality, real-time communication among a plurality of remote clients may be effected via the Internet. According to a specific embodiment of the invention, a conferencing system is provided which is scaleable to any number of simultaneous users and which may be used simultaneously by any number of ISPs, portals, and web sites to implement audio or video conferences through their sites. The system is based on a farm of servers, referred to herein as media servers, each of which runs one or more conferences in which any number of users may participate. Dynamic creation and allocation of conferences among the media servers are facilitated by a single dispatch server according to the available capacity reported by each. The dispatch and media servers (referred to collectively herein as the network operating center or NOC) sit directly on a high bandwidth, optical backbone by which remote clients may access the system. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The system&apos;s conferencing capacity is allocated according to agreements with customers (e.g., ISPs, portals, web auction sites, e-commerce sites, etc.) who, in turn, provide access to the system to their subscribers, i.e., the remote clients, via the ISPs&apos; web sites. For example, the ISP may provide a web page which includes embedded graphical objects selection of which by a subscriber on a client machine facilitates participation of the subscriber in a conference. To access the system, a one-time download of a lightweight client, e.g., a browser plug-in, is required. Depending upon the configuration, when a user views a conference-enabled web page or when she clicks to join, the browser transmits the IP address of the dispatch server, the conference name, and an authentication code to the client. The client then contacts the dispatch server and, using the plug-in, transmits a request to join the conference. If the client is validated (by reference to the authentication code), the dispatch server determines whether the requested conference is currently being facilitated on any of the media servers. If the conference exists, the dispatch server dispatches the client to the corresponding media server. That is, the client is given the IP address of the media server, to which it transmits another join request. The media server then establishes a channel to the client and adds the client to the requested conference. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> If, on the other hand, the requested conference does not exist, the dispatch server polls the media servers to determine which has most available capacity and triggers creation of the requested conference on that media server. The client is then dispatched to the media server in the manner described above. As clients leave a conference, the media server deletes them from the conference. When the last client is deleted, the conference is also deleted. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Because dynamic creation and allocation of conferences among the media servers are facilitated by the dispatch server according to media server capacity, the system&apos;s resources are efficiently used. Moreover, because the conferences are created dynamically, they may be recreated on another server in the event that, for example, the current server&apos;s capacity is exceeded. The shifting of a conference between servers is accomplished virtually transparently without the need for action by the participants. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> According to a specific embodiment, the hardware and software of the present invention operate in virtually stateless manner. That is, once the dispatch server dispatches a client to a media server for participation in a conference, the dispatch server &ldquo;forgets&rdquo; about the existence of both the client and the conference. Likewise, once there are no clients left in a conference on a media server, the conference is released and the media server &ldquo;forgets&rdquo; the conference ever existed. Similarly, the client &ldquo;knows&rdquo; nothing about the structure and operation of the network operating center. It merely receives an address and a confirmation mechanism from the ISP and connects with the system accordingly. The result is an extremely reliable, robust, and flexible architecture which is adaptable to service any level of conference traffic. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Thus, the present invention provides methods and apparatus for facilitating communication between a plurality of clients on a network. A request from a first one of the plurality of clients to join a first conference is received with a dispatch server. The first client is dispatched to the first conference on a first one of a plurality of media servers associated with the dispatch server. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The present invention also provides a system for facilitating communication between a plurality of clients on a network. The system includes a plurality of media servers coupled to the network, each of which is for facilitating at least one conference. Each of the conferences corresponds to a subset of the plurality of clients. A dispatch server is coupled to the network for statelessly dispatching the clients to the conferences on the media servers. The dispatch server is operable in response to a request from a first one of the clients to join a first conference to either determine which of the media servers is facilitating the first conference, or trigger creation of the first conference on a first one of the media servers where the first conference is not currently being facilitated. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> According to a specific embodiment of the invention, a dispatch server is provided for facilitating communication between a plurality of clients on a network using a plurality of media servers on the network. The dispatch server is based on a server object. A remote server service running on the server object provides access to the server object. A master service running on the server object communicates with and manages operation of the media servers in a stateless manner. The master service also statelessly dispatches the plurality of clients to conferences on the media servers. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> According to another specific embodiment, a media server is provided for facilitating communication between a plurality of clients on a network in conjunction with a dispatch server on the network. The media server is based on a server object. A remote server service running on the server object provides access to the server object. A slave service running on the server object communicates with the dispatch server. A mesh service running on the server object dynamically provides virtual connections among the plurality of clients for transmission of data and thereby facilitates a conference including the plurality of clients. The virtual connections are dynamically created using a plurality of connection objects. A connect service running on the server object configures the connection objects in the mesh service to provide the virtual connections. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> According to yet another specific embodiment, the present invention provides methods and apparatus for facilitating a first conference between a plurality of clients on a network. A request to join a first conference is received from a first one of the plurality of clients via the network. In response to the request, it is determined whether the first conference is currently being facilitated on any of a plurality of media servers. Where the first conference is currently being facilitated on a first one of the plurality of media servers, the first client is statelessly dispatched to the first conference on the first media server. Where the first conference is not currently being facilitated on any of the plurality of media servers, creation of the first conference is triggered on a second one of the plurality of media servers and the first client is statelessly dispatched to the first conference on the second media server. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> A mesh service is also described herein for running on a media server, the media server being for facilitating communication among a plurality of clients. The mesh service comprises a plurality of instances of a connection object class. The connection object class comprises an input method for subscribing to an output of a first connection object and receiving data units therefrom, an output method for transmitting the data units to a second connection object subscribing to the output method, and a clock method for moving the data units from the input method to the output method. The plurality of instances of the connection object class are dynamically configured to provide virtual connections among the plurality of clients. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Methods and apparatus are also provided for facilitating a first conference on a network between a first client and at least one other client. A first request to join the first conference is transmitted to a dispatch server via the network. A dispatch command is received from the dispatch server. The dispatch command identifies a first one of a plurality of media servers. A second request to join the first conference is transmitted to the first media server in response to the dispatch command from the dispatch server. A connection is established with the first media server by which the first client may participate in the first conference. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> According to another embodiment, methods and apparatus are provided for facilitating a first conference on a network between a first client and at least one other client. A graphical user interface is transmitted to the first client via the network. The graphical user interface includes an object corresponding to the first conference. First data are transmitted to the first client via the network. The first data identify a remote conferencing system. The remote conferencing system includes a plurality of media servers coupled to the network, and a dispatch server coupled to the network for statelessly dispatching the first client to the first conference on one of the media servers. The dispatch server is operable in response to a request from the first client to join the first conference to either determine which of the media servers is facilitating the first conference, or create the first conference on a first one of the media servers where the first conference is not currently being facilitated. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> A further understanding of the nature and advantages of the present invention may be realized by reference to the remaining portions of the specification and the drawings. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a simplified block diagram of a network communication system designed according to a specific embodiment of the invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>2</bold></highlight><highlight><italic>b </italic></highlight>are flow diagrams illustrating the addition of a client to a conference according to a specific embodiment of the invention; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> FIGS. <highlight><bold>3</bold></highlight>-<highlight><bold>5</bold></highlight> are a simplified block diagram of the configuration of an authentication server, a dispatch server, and a media server, respectively, according to various specific embodiments of the invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a</italic></highlight>-<highlight><bold>6</bold></highlight><highlight><italic>c </italic></highlight>illustrate the structure of the mesh service according to a specific embodiment of the invention; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates the configuration of a mesh service according to a specific conferencing embodiment; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates the configuration of a mesh service according to a specific point-to-point embodiment; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates the configuration of a mesh service according to a specific arena embodiment; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates the configuration of a mesh service according to a specific classroom embodiment; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> illustrates the configuration of a mesh service according to a specific panel discussion embodiment; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates the configuration of a mesh service according to another specific panel discussion embodiment; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a representation of a graphical user interface on a client machine according to a specific embodiment of the invention; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a simplified block diagram of a client plug-in designed according to a specific embodiment of the invention; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a simplified diagram of a network environment in which the present invention may be implemented; and </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a block diagram of a computer architecture for use with various embodiments of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS </heading>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In describing the various embodiments of the present invention, reference is made to various hardware configurations, communication protocols, and software architectures. It will be understood, however, that the present invention is much more widely applicable than the specific embodiments described herein. That is, the architecture of the present invention is not protocol or media specific and may be adapted to any protocol or any kind of media. Moreover, even though a Java implementation is described, other software architectures may be employed to implement the present invention. Therefore, in determining the scope of the present invention, references should be made to the appended claims. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a simplified block illustrating a network operation center (NOC) <highlight><bold>100</bold></highlight> designed according to a specific embodiment of the invention. The various entities in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> reside on and communicate via a network (not shown). The network may be a local area network (LAN), a wide area network (WAN), or, for example, the Internet. According to one Internet embodiment, NOC <highlight><bold>100</bold></highlight> resides directly on a high bandwidth backbone (not shown) such as the one provided by Qwest Communications, Inc. of Denver, Colo. A dispatch server <highlight><bold>102</bold></highlight> manages a plurality of media servers <highlight><bold>104</bold></highlight>. The term media server is used herein to make it clear that the communications facilitated by media servers <highlight><bold>104</bold></highlight> can be by any of a variety of media including, for example, audio, video, text, etc. Each of media servers <highlight><bold>104</bold></highlight> registers with dispatch server <highlight><bold>102</bold></highlight> which &ldquo;listens&rdquo; on port <highlight><bold>3450</bold></highlight> for clients requesting access to the system. In fact, media servers <highlight><bold>104</bold></highlight> also listen for clients on port <highlight><bold>3450</bold></highlight>. Dispatch server <highlight><bold>102</bold></highlight> maintains a &ldquo;slave list&rdquo; of all currently registered media servers <highlight><bold>104</bold></highlight>. The slave list includes the IP addresses of the registered media servers and whether they are currently active. When a media server <highlight><bold>104</bold></highlight> goes down, it notifies dispatch server <highlight><bold>102</bold></highlight> which makes the appropriate change to its slave list. An authentication server <highlight><bold>106</bold></highlight> provides an additional level of security by requiring validation of all requests from incoming clients <highlight><bold>108</bold></highlight> to participate in conferences on NOC <highlight><bold>100</bold></highlight>. According to one embodiment, dispatch server <highlight><bold>102</bold></highlight> communicates with media servers <highlight><bold>104</bold></highlight> and clients <highlight><bold>108</bold></highlight> via switch <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> According to one embodiment, a further security layer is provided in the dispatch mechanism of the present invention. According to this embodiment, when one server (e.g., a dispatch server) dispatches a client to another (e.g., a media server), the first server then calls the second which places the client on a will call list. Any calls from entities not on the will call list of the second server are rejected. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> According to a specific embodiment, a second standby dispatch server <highlight><bold>110</bold></highlight> is provided to replace dispatch server <highlight><bold>102</bold></highlight> in the event that dispatch server <highlight><bold>102</bold></highlight> goes down. The role of standby dispatch server <highlight><bold>110</bold></highlight> is to monitor the health of dispatch server <highlight><bold>102</bold></highlight> and detect failures on the application as well as the hardware level. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> As will be discussed below, active dispatch server <highlight><bold>102</bold></highlight> runs the dispatch mechanism of the present invention. It also registers all active media servers <highlight><bold>104</bold></highlight>, maintaining a slaves list thereof. The slaves list and the Master service (described below) are mirrored on standby dispatch server <highlight><bold>110</bold></highlight>. According to one embodiment, a platform-independent Java application triggers updates on standby server <highlight><bold>110</bold></highlight> when either file is modified. File synchronization is achieved by standby dispatch server <highlight><bold>110</bold></highlight> (designed in Java). </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Standby dispatch server <highlight><bold>110</bold></highlight> runs a standby service (not shown) which monitors the heartbeat of the dispatch application on server <highlight><bold>102</bold></highlight> using an ultra light RMI call to the Master service (described below) on dispatch server <highlight><bold>102</bold></highlight>. Standby server <highlight><bold>110</bold></highlight> also monitors the heartbeat of any of a variety of machines on the network which validate the health of the main dispatch interface on active dispatch server <highlight><bold>102</bold></highlight>. These machines may include, for example, the default gateway, any of the media servers, an administrative server (i.e., an auxiliary server for performing administrative functions), etc. Thus, a heartbeat failure corresponds either to a complete hardware failure of active server <highlight><bold>102</bold></highlight>, failure of the Master service on active server <highlight><bold>102</bold></highlight> to respond, or a failure in pinging the default gateway. In the case of a ping failure at least one other entity is pinged to ensure that switch over occurs only when the main dispatch network interface for server <highlight><bold>102</bold></highlight> is unhealthy. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> If any of the monitored heartbeats fail, standby server <highlight><bold>110</bold></highlight> triggers a switch over. According to a specific embodiment, the reason and time of the switch over are logged. Then Standby server <highlight><bold>110</bold></highlight> uses reflection through serial connection <highlight><bold>111</bold></highlight> to disable the port of switch <highlight><bold>105</bold></highlight> by which the main dispatch ports of both servers <highlight><bold>102</bold></highlight> and <highlight><bold>110</bold></highlight> are connected to the network, and takes over the IP address previously owned by dispatch server <highlight><bold>102</bold></highlight>. Once this is done, standby dispatch server <highlight><bold>110</bold></highlight> stops executing the standby service and commences operation as the active dispatch server. At this point, a system administrator is informed of the failure and switch over using an alert-page or some other integrated solution. Because standby dispatch server <highlight><bold>110</bold></highlight> now has the same IP address as previously owned by active dispatch server <highlight><bold>102</bold></highlight>, operation of the system continues as if there were no interruption. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> According to various specific embodiments, authentication server <highlight><bold>106</bold></highlight> may be made redundant in a manner similar to that described above with reference to dispatch server <highlight><bold>102</bold></highlight>. That is an inactive standby authentication server may be provided to take over the authentication function if authentication server <highlight><bold>106</bold></highlight> ever goes down. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> An example of the operation of NOC <highlight><bold>100</bold></highlight> will now be described with reference to <cross-reference target="DRAWINGS">FIGS. 1, 2</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>2</bold></highlight><highlight><italic>b</italic></highlight>. The dashed arrows in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> represent the lines of communication between the devices. A client <highlight><bold>108</bold></highlight> initially connects with a web page <highlight><bold>112</bold></highlight> which is maintained by a customer of NOC <highlight><bold>100</bold></highlight>. By viewing web page <highlight><bold>112</bold></highlight> or clicking on a link in that page, client <highlight><bold>108</bold></highlight> indicates that its user wishes to participate in a conference which will be referred to in this example as conference XYZ. If client <highlight><bold>108</bold></highlight> does not have the client plug-in (described below) which allows it to communicate with NOC <highlight><bold>100</bold></highlight>, the plug-in may be quickly downloaded and installed on client <highlight><bold>108</bold></highlight>. Once client <highlight><bold>108</bold></highlight> has the client plug-in, customer web page <highlight><bold>112</bold></highlight> gives client <highlight><bold>108</bold></highlight> the IP address of authentication server <highlight><bold>106</bold></highlight> and an account number or authentication code which is used for authentication purposes. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Using the IP address obtained from the customer web site, client <highlight><bold>108</bold></highlight> contacts authentication server <highlight><bold>106</bold></highlight> requesting to join conference XYZ. Authentication server <highlight><bold>106</bold></highlight> receives the join request from client <highlight><bold>108</bold></highlight> via port <highlight><bold>3450</bold></highlight> and, upon validation of the request, dispatches client <highlight><bold>108</bold></highlight> to dispatch server <highlight><bold>102</bold></highlight> by providing its IP address to the client. Validation of the request may be accomplished by comparison of the account number or authentication code accompanying the request with a list of valid accounts accessible to authentication server <highlight><bold>106</bold></highlight>. Alternatively, the request may be preceded by a communication from the customer web site alerting authentication server <highlight><bold>106</bold></highlight> of the impending request and providing authentication information. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Client <highlight><bold>108</bold></highlight> places a set up call (<highlight><bold>202</bold></highlight>) initiating the opening of a TCP socket to dispatch server <highlight><bold>102</bold></highlight> using the IP address obtained from authentication server <highlight><bold>106</bold></highlight> (syn, syn/ack, ack). In response to the set up call, dispatch server <highlight><bold>102</bold></highlight> transmits a connect command (<highlight><bold>204</bold></highlight>) to the client. Additional authentication or validation of the request may be performed by dispatch server <highlight><bold>102</bold></highlight>. Alternatively, dispatch server <highlight><bold>102</bold></highlight> may be the first point of contact with the system and perform all authentication functions. That is, according to specific embodiments, an additional authentication server <highlight><bold>106</bold></highlight> is not used. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Once the TCP connection is established, client <highlight><bold>108</bold></highlight> sends a join request (<highlight><bold>206</bold></highlight>) to dispatch server <highlight><bold>102</bold></highlight> with a plurality of parameters. These parameters may include: the conference name, an account number, user name (if know else the user is prompted), web host IP (may be determined programmatically for validation of origin), operating system, browser, browser version, sound card, sound card driver, etc. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Upon receiving the join request from the client to join conference XYZ and validating the origin of the request, dispatch server <highlight><bold>102</bold></highlight> determines whether conference XYZ exists by polling all of media servers <highlight><bold>104</bold></highlight> on its slave list. If XYZ conference is running on a particular server <highlight><bold>104</bold></highlight> (e.g., Media Server <highlight><bold>5</bold></highlight>), dispatch server <highlight><bold>102</bold></highlight> transmits a message to client <highlight><bold>108</bold></highlight> which includes the IP address of the relevant media server <highlight><bold>104</bold></highlight> (<highlight><bold>208</bold></highlight>). That is, dispatch server <highlight><bold>102</bold></highlight> dispatches client <highlight><bold>108</bold></highlight> to the IP address of the media server <highlight><bold>104</bold></highlight> on which conference XYZ is currently being facilitated. This causes client <highlight><bold>108</bold></highlight> to disconnect from dispatch server <highlight><bold>102</bold></highlight> by sending an ENDSESSION message and operating a four stage classical disconnect (fin, ack, fin, ack), and place a new stateless set up call (<highlight><bold>210</bold></highlight>) to Media Server <highlight><bold>5</bold></highlight>, i.e., the same call with which the client originally made contact with authentication server <highlight><bold>106</bold></highlight> and dispatch server <highlight><bold>102</bold></highlight>. In response to the set up call, Media Server <highlight><bold>5</bold></highlight> transmits a connect command (<highlight><bold>212</bold></highlight>) to client <highlight><bold>108</bold></highlight> in response to which the client transmits a join request (<highlight><bold>214</bold></highlight>). This time, however, because conference XYZ is running on Media Server <highlight><bold>5</bold></highlight>, Media Server <highlight><bold>5</bold></highlight> establishes a channel (<highlight><bold>216</bold></highlight>) to let the client know on which channel it will be listening. The client transmits a channel command (<highlight><bold>218</bold></highlight>) to let the server know to which channel to transmit. The client is thus connected to the desired conference and may begin transmitting and receiving audio and/or video data. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Information regarding the other participants in the conference are transmitted from Media Server <highlight><bold>5</bold></highlight> to client <highlight><bold>108</bold></highlight> via an add user command (<highlight><bold>220</bold></highlight>). This information includes at least the users&apos; names and may also include other information such as, for example, the other users&apos; IP addresses. The names of the conference participants may then be displayed on each client&apos;s user interface. Each time a new client joins the conference, all of the other clients receive an add user command from the media server. Similarly, each time a client exits the conference, each remaining client receives a delete user command (<highlight><bold>222</bold></highlight>) which results in the removal of the deleted user&apos;s name from the user interface. Conference XYZ exists until empty, i.e., until the last client exits, at which point it vanishes as if it never existed. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> If after receiving join request <highlight><bold>206</bold></highlight> dispatch server determines that conference XYZ does not currently exist, dispatch server <highlight><bold>102</bold></highlight> polls all of the active media servers <highlight><bold>104</bold></highlight> to determine which has the most free capacity. If Media Server <highlight><bold>5</bold></highlight> replies that it has the most free capacity, dispatch server <highlight><bold>102</bold></highlight> sends a message to Media Server <highlight><bold>5</bold></highlight> triggering creation of conference XYZ on Media Server <highlight><bold>5</bold></highlight>. Then dispatch server <highlight><bold>102</bold></highlight> dispatches the client to conference XYZ on Media Server <highlight><bold>5</bold></highlight> in the manner described above. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> As described above, the media server in which a particular conference is created is determined by which media server reports the most available capacity to the dispatch server. The available capacity of a media server may be estimated in a variety of ways according to various embodiments of the invention. According to one embodiment, if a channel is opened to a media server, the media server&apos;s capacity is determined to be diminished by the bandwidth allocated to the particular type of channel, e.g., video or audio. By contrast, for a system in which there is only one type of channel, e.g., audio, the media server need only keep track of the number of current users. Capacity may also be measured in terms of CPU units or bandwidth units. Because the dispatch server doesn&apos;t care how the media servers estimate their capacity, the estimation can be modified or made more sophisticated over time without having to make major architectural changes. According to one embodiment, capacity is measured by the number of conferences multiplied by some predetermined number of users. This mechanism may be used to effectively reserve conference capacity according to a customer&apos;s wishes. That is, a customer ISP may enter into a contractual arrangement with the NOC according to which any conference associated with that ISP is allocated the bandwidth resources to support the predetermined number of clients. Thus, even where fewer than the predetermined number of clients are participating in a given conference on a media server, the media server will report its available capacity to the dispatch server as if the predetermined number of clients are participating in the conference. This mechanism serves as a guarantee to the customer ISP that at least that number of clients will be able to participate in the conference. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The dispatch mechanism described above is essentially the scaling mechanism of the present invention. In other systems, scalability is typically obtained by maintaining and tracking state information. By contrast, the system of the present invention remains completely stateless. One of the benefits of being stateless is that the system can be dynamically reconfigured without the requirement that current state information be communicated. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Moreover, the dispatch mechanism may be used for a variety of functions. It can be used as described herein to dynamically recreate conferences in the event that a server goes down. That is, in such a situation, the users in a particular conference on that server may be dispatched to another server for recreation of the conference. The dispatch mechanism may also be used to implement features useful to the ISP customer. For example, if a user is talking to a sales representative at an e-commerce web site and wants to talk to the manager, the dispatch mechanism may be employed to effect dispatch of the user to the manager. As will understood, there are a wide variety of functions that may be derived from this powerful mechanism which are contained within the scope of the present invention. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> One way to think of the system is that it creates numerous small conferences, i.e., each beginning with one client. Each of the conferences is facilitated on one of the media servers <highlight><bold>104</bold></highlight>. As clients are added to a particular conference, that conference bottom fills like a glass being filled with water. Because of this, there is a risk that the conferences on any single media server could accumulate so many users that the server&apos;s capacity is exceeded and data begins to get dropped. To address this possibility, a specific embodiment of the invention enables the media server to notify the dispatch server when it needs to &ldquo;punt&rdquo; one or more of its conferences due to a variety of conditions such as, for example, the server going off line, or current traffic exceeding the server&apos;s capacity. Then, using the dispatch mechanism of the present invention, the punted conference or conferences may be reconstructed on one of the other media servers with little or no noticeable latency. That is, the punting media server dispatches the clients of the punted conference either back to the dispatch server or another media server on which the conference will be reconstructed. In other words the usual mechanism for conference creation via the dispatch server can be used, or the dispatch server can determine where the conference should be reconstructed and communicate the IP address of the new media server to the current media server so that the participant clients may be dispatched to the new server directly. Any time the clients are given such a dispatch, they hang up and call whatever server they are instructed to call at which point the conference may be reconstructed. Thus, the client is relatively stateless as well, i.e., a client could be in one server for half and hour, get dispatched and end up in another for the remainder of the conference, all of this being transparent to the end user. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> When a media server goes down, the dispatch server is typically the first to know because it is constantly querying the media servers regarding the location of specific conferences and available capacity. As described above and according to a specific embodiment, the dispatch server does nothing out of the ordinary when it determines that a media server is going off line except make the appropriate alteration to its slave list. That is, the dispatch server allows the conferences on the downed server either to be dispatched by that server as its going down, or to be reestablished according to the original procedure, i.e., the clients reestablish contact with the system and recreate the conference. However, according to alternative embodiments, system management tools are provided which more proactively handle such server crashes. For example, out-of-band signaling between machines can alert system management of problems. According to other embodiments, quality-of-service tools continuously collect latency data for all of the media servers in the NOC. If the latency data indicate at run time that a particular server requires more or less CPU than originally anticipated, adjustments to that server&apos;s capacity may be made. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The open architecture of the present invention avoids having to dedicate the bandwidth of specific servers to specific customer web pages or requiring the customer or the client to call up in advance to arrange a particular conference. According to the invention, conferences are created spontaneously and bandwidth is allocated dynamically. Thus, the customer web site can create whatever conferences they want and arrange users in whatever groupings they want, being limited only by the amount of utilization capacity for which they have contracted with the NOC. According to a specific embodiment, utilization capacity is based on user capacity, i.e., a maximum number of simultaneous users, rather than dedicated resources. It will be understood that, as with electric power generation, the total capacity of the system can be overbooked in accordance with usage statistics. For example, advantage can be taken of the fact that usage peaks in Japan are complementary with those in the United States. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In this area, there are several specific problems which are currently confounding ISPs. For example, when clients connect in current systems, they must stay connected to the same server to communicate. This is obviously undesirable in situations in which the server&apos;s capacity is exceeded or in which the server goes off line. In addition, there is the logistical problem presented by the thousands and thousands of clients all over the Internet that must somehow find each other. This brings up the related problem of how to get participants in the same conference to connect to the same server at the same time. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> A single server architecture can operate in the face of these problems provided the number of clients and conferences serviced by the server is limited to a relatively small number. Unfortunately, from the point of view of most ISPs, this is not an acceptable solution. A multiple server architecture can address the issues regarding the overall number of clients to be serviced, but with more than one server, the problem becomes how to determine when and where to create a particular conference, and how clients will know with which of the multiple servers to connect (i.e., the different servers have different IP addresses). </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> A real-time communication system designed according to the present invention solves all of these problems. The dispatch server of the present invention provides a single point of contact which communicates the location of conferences to clients. And, because of the stateless nature of the architecture, this is done without a complex communication protocol between the dispatch and media servers. That is, the typical model for scaleable architectures involves a tremendous amount of communication between machines as to who&apos;s got what (i.e., state data). The simple and stateless architecture of the present invention avoids this necessity. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Another scalability mechanism is also provided according to various embodiments of the invention. This scalability mechanism employs a middle layer of dispatch servers between the NOC&apos;s primary dispatch server and the farm of media servers. That is, the dispatch servers in the middle layer each have their own dedicated bank of media servers in which they create conferences, monitor media server capacity, and dispatch clients in the manner described above. The primary dispatch server remains the initial point of contact with the NOC except that, in this embodiment, the primary dispatch server is responsible only for communicating with and dispatching clients to the dispatch servers in the middle layer. Thus, if a client contacts the primary dispatch server requesting to join a particular conference, the primary dispatch server contacts the middle layer of servers to determine where the conference is located. Each of the middle layer of dispatch servers then determines if one of its media servers is facilitating the conference, and if so, reports this to the primary dispatch server which dispatches the client either to the reporting dispatch server or directly to the relevant media server if the IP address of the media server is reported to the primary dispatch server. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> FIGS. <highlight><bold>3</bold></highlight>-<highlight><bold>5</bold></highlight> are simplified block diagrams of the configurations of an authentication server <highlight><bold>106</bold></highlight>, a dispatch server <highlight><bold>102</bold></highlight>, and a media server <highlight><bold>104</bold></highlight>, respectively, designed according to various embodiments of the invention. Authentication server <highlight><bold>106</bold></highlight>, dispatch server <highlight><bold>102</bold></highlight>, and media server <highlight><bold>104</bold></highlight> are all modeled after the same architecture. The main differences between the servers are in the service classes installed on each. That is, server object <highlight><bold>300</bold></highlight> is the basis for dispatch server <highlight><bold>102</bold></highlight>, media server <highlight><bold>104</bold></highlight>, and authentication server <highlight><bold>106</bold></highlight>. According to a specific embodiment, server object <highlight><bold>300</bold></highlight> is a Java based server running on an NT operating system. Server object <highlight><bold>300</bold></highlight> employs the NT server model in that services are installed on top of server object <highlight><bold>300</bold></highlight> which have start, stop, pause, and resume interfaces with server object <highlight><bold>300</bold></highlight>. Server object <highlight><bold>300</bold></highlight> on each of the different types of servers has access to a system memory <highlight><bold>301</bold></highlight> which stores a list of the services employed by that server (described below). </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Server <highlight><bold>300</bold></highlight> provides basic application services such as configuration, logging, tracing, startup, orderly shutdown, and remote access. Server <highlight><bold>300</bold></highlight> runs services which perform the actual application functionality. Many services are used in multiple different applications, as they too are built to be general purpose and re-usable. Re-using the same code in multiple applications makes the software more robust and maintainable. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Server <highlight><bold>300</bold></highlight> utilizes an object-oriented event model based on the model used in the Java user-interface system. Objects in the system have incoming methods and fire outgoing events. The events are multicast so that multiple objects can subscribe to another object&apos;s events. Every object that fires events offers add listener and remove listener methods for that event. A &ldquo;Remote Event&rdquo; nests other events. This allows other processes or machines on the network to listen for events remotely. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Server <highlight><bold>300</bold></highlight> loads and manages a configuration file on startup that can be accessed by any service run by the server. From this file, it loads the class names of the services it is to run. This determines what server application will be run by the machine. It provides methods to set and get configuration properties, and creates and starts the services it found in the configuration file. Server <highlight><bold>300</bold></highlight> fires events when a configuration variable is changed, and when a new service is created. This has the advantage that the configuration of the system may be changed dynamically without the necessity for rebooting. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The services running on server <highlight><bold>300</bold></highlight> are all based upon a single service class. The generic service class provides remote access, convenient access to the base server object, and full support for tracing and event logging. The basic service fires trace events and log events. Each service has a published interface accessible remotely via Java&apos;s Remote Method Invocation (RMI) mechanism. The interface includes an incoming interface for receiving methods and an outgoing interface for firing events. The RMI mechanism provides system flexibility in that it allows any of the services to exist across machines. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Remote server service <highlight><bold>302</bold></highlight> facilitates remote access to the server via the RMI mechanism. It allows remote programs to restart, stop, query, and configure server <highlight><bold>300</bold></highlight>. Remote server service <highlight><bold>302</bold></highlight> provides the remote interfaces to server object <highlight><bold>300</bold></highlight> by which remote configuration is achieved. Remote server service <highlight><bold>302</bold></highlight> also provides version information to remote applications. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> A logger service (not shown) in server <highlight><bold>300</bold></highlight> provides a simple mechanism to log text information. The logger can be configured to log to a file, to the console, both, or neither. It runs a separate output thread to buffer file output for increased performance under high-stress conditions. A trace logger service (not shown) in server <highlight><bold>300</bold></highlight> inherits the logger service. When the trace logger service is started, it listens for &ldquo;service added&rdquo; events from server object <highlight><bold>300</bold></highlight>. For every event, it listens for the new service&apos;s trace events. In effect, it listens for all trace events that happen in the system, and logs them to a file or the console, as configured. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> An event logger service (not shown) in server <highlight><bold>300</bold></highlight> behaves like the trace logger service, subscribing for all log events in the system. These can be reported to a file or to the console, as configured. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> A client host service <highlight><bold>304</bold></highlight> is a call control service which facilitates the connection to clients. This service isolates the protocol between the client and the server, providing methods and events that correspond with connection and other protocol-related tasks. Client host service <highlight><bold>304</bold></highlight> creates remote user objects that represent currently connected clients. It fires connection, disconnection, text message, ignore, and other events. Each remote user object provides remotely-accessible methods to send text messages, disconnect, add and remove users from the roster, and place requests for channels to be opened up with a given media type. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Authentication server <highlight><bold>106</bold></highlight> includes a validation service <highlight><bold>306</bold></highlight> which performs the function of authenticating or validating an incoming request, triggering dispatch of the join request if valid, or rejection of the request if invalid. According to various embodiment, validation may be determined with respect to account numbers or codes identifying traffic from customer web pages which may be stored in the system memory, or received from the customer immediately in advance of incoming request. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Master service <highlight><bold>402</bold></highlight> performs the primary functions of dispatch server <highlight><bold>102</bold></highlight>. It maintains a list of slave machines, i.e., media servers, and communicates with the slave service <highlight><bold>502</bold></highlight> on those machines. Master service <highlight><bold>402</bold></highlight> handles calls from the call control service. As discussed above, if a conference requested by a client does not exist on any of the connected slave media servers, it is created on the slave with the most available capacity. The slave may be a media server or another dispatch server. The call is then dispatched to the server on which the conference was created. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Slave service <highlight><bold>502</bold></highlight> is the counterpart to the master service <highlight><bold>402</bold></highlight> and resides on media servers <highlight><bold>104</bold></highlight>. It listens for commands from master service <highlight><bold>502</bold></highlight> and passes them on to the main local service; either another master service in the case of a dispatch server, or a groups service (describe below) in the case of a media server. If the server is shut down or experiences a fatal exception, slave service <highlight><bold>502</bold></highlight> notifies master service <highlight><bold>402</bold></highlight> that it is shutting down. According to a specific embodiment, in the event of a shut down of a media server, the corresponding slave service <highlight><bold>502</bold></highlight> dispatches all connected clients to master service <highlight><bold>402</bold></highlight> for recreation of their respective conferences on another server. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Master service <highlight><bold>402</bold></highlight> and slave service <highlight><bold>502</bold></highlight> are complementary services which cooperate across machine boundaries and effect the dispatch mechanism of the present invention. As mentioned above, master service <highlight><bold>402</bold></highlight> typically runs on a dispatch server, while slave service <highlight><bold>502</bold></highlight> typically runs on a media server. It should be noted, however, that a dispatch server may run slave service <highlight><bold>502</bold></highlight> as well. Master service <highlight><bold>402</bold></highlight> dispatches clients to the media servers and triggers conference creation on the media servers. Slave service <highlight><bold>502</bold></highlight> creates conferences in response to a command from the master, and adds or deletes users from the conferences. The slave service also triggers creation of mesh components (described below) corresponding to new conferences and new users through the groups service as will be described. According to a specific embodiment, slave service <highlight><bold>502</bold></highlight> also determines its media server&apos;s current available capacity. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> In addition, in response to a configuration change, e.g., a new dispatch server coming on line, slave service <highlight><bold>502</bold></highlight> gets a parameter from the config called &ldquo;dispatch master&rdquo; which is set to an IP address identifying the master service on the new dispatch server. Slave service <highlight><bold>502</bold></highlight> then calls a register method on the master. The contact information of slave service <highlight><bold>502</bold></highlight>, i.e., the Java Inet which includes the host name and IP address, is then added to the slave list of slaves maintained by the master. When a media server shuts down, its slave service calls an escape method on the master. On start-up or when given a dispatch master (i.e., a config change event turns out to be a dispatch master), slave service <highlight><bold>502</bold></highlight> registers immediately with the appropriate master. This is part of the dynamic configuration capabilities of the system. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> According to various embodiments, slave service <highlight><bold>502</bold></highlight> also stores a time stamp for each client corresponding to the time when the client joined a conference. When the client leaves the conference this is fired out as an event which is stored in a log file. This information may be used, for example, to generate usage reports or billing information for customers. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> A specific embodiment of the dispatch mechanism of the present invention will now be described in greater detail with reference to FIGS. <highlight><bold>3</bold></highlight>-<highlight><bold>5</bold></highlight>. Each of servers <highlight><bold>102</bold></highlight>, <highlight><bold>104</bold></highlight>, and <highlight><bold>106</bold></highlight> has a client host service <highlight><bold>304</bold></highlight> which listens on port <highlight><bold>3450</bold></highlight> and which facilitates communication with clients. That is, client host <highlight><bold>304</bold></highlight> on each server is a generic object which facilitates the connection between a client and the server. Client host <highlight><bold>304</bold></highlight> manages the client from the server&apos;s point of view, i.e., it abstracts the client connection protocol from the server. The client speaks a simple TCP text protocol, i.e., tabs delineating parameters with the end of the line delineating commands. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Despite the fact that specific embodiment of the invention are described with reference to port <highlight><bold>3450</bold></highlight>, it will be understood that different ports may be used to facilitate communication with clients. Specifically, a port which is open in most firewalls by default would be an excellent candidate. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Operation of client host service <highlight><bold>304</bold></highlight> proceeds as follows. When the client is given an IP address to call, e.g., by the customer web page (the IP address could be an authentication server, dispatch server, or a media server), the client places a call to port <highlight><bold>3450</bold></highlight> of the IP address transmitting the &ldquo;set up&rdquo; command as discussed above with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Client host <highlight><bold>304</bold></highlight> then transmits a &ldquo;connect&rdquo; command which confirms to the client that it has found the correct server. The client sends a &ldquo;join&rdquo; request with a bunch of associated parameters including the conference name and the referring web server IP address. This information may be determined programmatically from an account number corresponding to the customer and reported by the client&apos;s browser. This would be difficult to spoof thus providing one layer of security. Additional security is also likely be provided at the customer site, e.g., restricting access to the web page. Other parameters sent with the join request include information regarding the client&apos;s sound card, operating system, browser, application, client version, driver version on sound card, etc. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> If the server is the dispatch server <highlight><bold>102</bold></highlight>, the master service <highlight><bold>402</bold></highlight> would then determine to which media server the client should be directed, client host <highlight><bold>304</bold></highlight> then issuing a dispatch command instructing the client to connect with a particular media server. At this point the client starts the process over with the media server, i.e., set up, connect, join. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> If the server is a media server <highlight><bold>104</bold></highlight>, client host <highlight><bold>304</bold></highlight> sends a channel request to the client and the client sends a channel request to the media server. With these two commands, the client and the media server are essentially negotiating the ability to send a particular kind of data, e.g., audio, on a given channel. The channel command from the client host lets the client know that it has found a location for its conference and that it can open a channel for a specific type of media on a given port. Other processes in client host <highlight><bold>304</bold></highlight> include add user, delete user, and keeping an up-to-date list of users in a given conference. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> The client host service is a generic object which does not effect the actual connection, conference creation, etc., it only fires events and issues five commands, i.e., connect, dispatch, channel, add user, delete user, in response to the various inputs. For example, in response to receiving the set up command from the client, the client host service fires off the event &ldquo;New User&rdquo; with all of the appropriate client information supplied by the client. In response to a join request from the client, client host fires of the event &ldquo;Join Request&rdquo; with its associated elements. In response to the events fired by client host, and depending upon which type of server is receiving the call, either the master or the slave calls the appropriate methods, e.g., accept join, reject join, dispatch. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> As mentioned above, the client host service is generic. In fact, the server architecture of the present invention is an extremely flexible plug-and-play architecture in that a subset of the available service classes may be used to create a new kind of server. For example, a text chat server could be configured using the remote server service, the client host service, the groups service, and a mesh service which pipes text rather than audio data. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> In addition to slave service <highlight><bold>502</bold></highlight> and client host service <highlight><bold>304</bold></highlight>, a media server <highlight><bold>104</bold></highlight> includes a connect service <highlight><bold>504</bold></highlight> and a mesh service <highlight><bold>506</bold></highlight>. The connect and mesh services are media server specific entities which work very closely together. Mesh service <highlight><bold>506</bold></highlight> pipes various media data (e.g., audio and video), and connect service <highlight><bold>504</bold></highlight> configures the mesh according to the specific connectivity scheme. In one group conference embodiment, connect service <highlight><bold>504</bold></highlight> comprises a groups service which organizes clients into groups and configures the mesh to facilitate conferences among the members of each group. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Groups service <highlight><bold>504</bold></highlight> registers with the corresponding client host service <highlight><bold>304</bold></highlight> on the same media server requesting all of its events. Groups service <highlight><bold>504</bold></highlight> calls accept or reject when a join event is fired, dispatch when, for example, the server is shutting down, or creates a conference. When groups service <highlight><bold>504</bold></highlight> gets calls regarding a new channel, it calls mesh service <highlight><bold>506</bold></highlight> to set the channel up. Groups service <highlight><bold>504</bold></highlight> may be thought of as a special case of a more generic &ldquo;connect&rdquo; service. That is, mesh service <highlight><bold>506</bold></highlight> may be configured in a wide variety of ways, e.g., group conferences, arenas, etc. The groups service may thus be replaced by some other connect service to configure the mesh appropriately for the corresponding application. The manner in which the groups service configures the mesh service will be described in greater detail in the discussion of the mesh service. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Each of the services are essentially &ldquo;agnostic&rdquo; in that they look &ldquo;down&rdquo; but not &ldquo;up&rdquo;. That is, they know about the services below them from which they receive events and to which they issue method calls, but they don&apos;t know about the services above them to which they fire events and from which they receive method calls. For example, the groups service knows about the mesh service, but the mesh service doesn&apos;t know (or need to know) about the groups service. Thus, if it becomes desirable to organize clients into an &ldquo;arena&rdquo; with rows, a podium, etc., the groups service could be replaced by an arena service which would have a similar relationship with the mesh and client host services as does the groups service. And, because neither the mesh service nor the client host service know anything about the groups service, this can be done without modification to the other services. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Mesh service <highlight><bold>506</bold></highlight> provides media routing components that can be connected to create various applications. It does no connections itself, it merely runs the connections set up by other services. Mesh service <highlight><bold>506</bold></highlight> takes incoming data streams from clients and transmits outgoing data streams to clients (see <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a</italic></highlight>). Mesh service <highlight><bold>506</bold></highlight> may be configured or &ldquo;wired&rdquo; in a wide variety of ways to implement specific types of communication. That is, mesh service <highlight><bold>506</bold></highlight> is generic to the various different embodiments of the invention (group conferencing, arenas etc.). In each such embodiment, mesh service <highlight><bold>506</bold></highlight> is configured by another controlling service. For example, groups service <highlight><bold>504</bold></highlight> configures mesh service <highlight><bold>506</bold></highlight> for audio or video conferencing. By contrast, an arena service (described below) may replace the groups service and configure the mesh for an arena embodiment. Alternatively, a point-to-point service may be used in place of either the groups or arena services to effect point-to-point communication. It will be understood that there are a wide variety of ways in which the mesh service of the present invention may be configured to provide a desired connectivity and a corresponding connect service for each, and that each such connect service and mesh configuration is within the scope of the present invention. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Mesh service <highlight><bold>506</bold></highlight> may be thought of as a generic traffic routing system which allows clients in a group to hear more than one member of the group at a time and to hear other group members even while they are speaking. It is flexible enough to also allow for selection of individual streams for dominance or for silencing. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> The basic building block of mesh service <highlight><bold>506</bold></highlight> is an object shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b </italic></highlight>and referred to herein as a &ldquo;chip.&rdquo; Chip <highlight><bold>600</bold></highlight> is a software construct which behaves in a manner somewhat analogous to hardware. The fundamental unit of data which flows through the mesh (and the chips of the mesh) is referred to herein as an &ldquo;atom&rdquo;. Any text message, audio stream, or video stream in the system is organized into atoms <highlight><bold>602</bold></highlight> for transmission through the mesh service. The make up of an atom may vary according to various embodiments of the invention. That is, an atom may represent one packet of data in some standard protocol format. Alternatively, an atom may represent multiple packets, or even a portion of a single packet. In any case, each atom represents and points to some block of media data. Each atom is also characterized by a priority and identifies the client of origin. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b</italic></highlight>, each chip <highlight><bold>600</bold></highlight> allows other chips to connect to their output stages. The direction of the arrows in the diagram are opposite the direction for hardware diagram to reflect the fact that the chips on the right are subscribing to the output of the chip on the left. A chip receives atoms from other chips in an input queue <highlight><bold>602</bold></highlight>. Mesh service <highlight><bold>506</bold></highlight> calls a clock method <highlight><bold>604</bold></highlight> on chip <highlight><bold>600</bold></highlight> that causes the derived class to do whatever task it is assigned. Specific instantiations of the chip class with differing functionalities will be discussed below. Any atoms output by chip <highlight><bold>600</bold></highlight> during its clock method are received in the input queue of chips connected to the chip&apos;s output <highlight><bold>606</bold></highlight>. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> A special kind of chip is shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c </italic></highlight>and is referred to herein as a &ldquo;board.&rdquo; Board <highlight><bold>650</bold></highlight> inherits from chip <highlight><bold>600</bold></highlight>, adding an &ldquo;add chip&rdquo; method. The &ldquo;add chip&rdquo; method adds chips to the board and defines the stage of the board to which the chip is added. Board <highlight><bold>650</bold></highlight> is an example of a board having four stages, i.e., chips <highlight><bold>600</bold></highlight> have been added to stages <highlight><bold>1</bold></highlight>, <highlight><bold>2</bold></highlight>, <highlight><bold>3</bold></highlight> and <highlight><bold>4</bold></highlight>. In the example shown, &ldquo;add chip&rdquo; is called 10 times with 2 chips <highlight><bold>600</bold></highlight> being added to stage <highlight><bold>1</bold></highlight>, 2 chips <highlight><bold>600</bold></highlight> to stage <highlight><bold>2</bold></highlight>, 4 chips <highlight><bold>600</bold></highlight> to stage <highlight><bold>3</bold></highlight>, and 2 chips <highlight><bold>600</bold></highlight> to stage <highlight><bold>4</bold></highlight>. The inputs of the chips of a particular stage are &ldquo;wired&rdquo; to the outputs of the chips of the previous stage to implement the desired connectivity and functionality. The chips in stage <highlight><bold>1</bold></highlight> are &ldquo;wired&rdquo; to the input of board <highlight><bold>650</bold></highlight> and the chips on stage <highlight><bold>4</bold></highlight> are &ldquo;wired&rdquo; to the output of board <highlight><bold>650</bold></highlight>. When the board is clocked (by its clock method), all of the chips on the board are clocked one stage at a time, moving the atoms from left to right with each clock. In addition, board structures may be nested with boards being added to the stages of other boards such that extremely complex functions can be implemented. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> A groups conference embodiment of the invention in which a groups service controls and configures the mesh service will now be described with reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. In this embodiment, each media server has a mesh service which is configured as a large multistage board <highlight><bold>700</bold></highlight>. The first stage of board <highlight><bold>700</bold></highlight> includes one receiver chip <highlight><bold>702</bold></highlight> for each type of media, e.g., audio, video, etc., handled by that board. Therefore, each media server which handles audio has one receiver chip <highlight><bold>702</bold></highlight> which listens for audio data on a specific port, e.g., UDP <highlight><bold>3450</bold></highlight> or UDP <highlight><bold>7000</bold></highlight>, and transforms RTP (real time protocol) packets to atoms, i.e., the fundamental unit of data in the mesh. An RTP packet is composed of a header and data. The header includes a time stamp (which indicates the time packet was transmitted), a source ID (used to identify client), and a sequence number (for identification of missing packets). </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> This embodiment of the present invention uses RTP to transmit audio data packets because RTP typically runs on top of UDP/IP rather than TCP/IP. UDP differs from TCP in that packets are not guaranteed to be delivered. Since a voice packet is only useful if it arrives in time to be played, this is preferable to TCP, which keeps re-transmitting packets until they are delivered. In addition, UDP is a socketless connection, so a single port on the server handles all clients. This vastly simplifies firewall issues. Of course, it will be understood that a wide variety of communication protocols are adaptable to the principles of the present invention. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> RTP packets contain information on sequence and playtime, allowing an endpoint to know what may have been missed and to know when a packet arrives too late to be played. If packets start arriving late, both the client and the media server will increase the depth of their buffers, adaptively trading latency to insure minimal packet loss. If conditions improve, the buffers are dynamically reduced to decrease latency. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> It takes time for packets to leave a client and travel across the Internet to their destination. In a voice application, this translates into a delay between the time the voice is spoken and the time it is heard on the other end. This delay is called latency. Studies have shown that in two-way conversation, if latency exceeds 500 ms, participants start having difficulty maintaining the conversation, and resort to signaling each other when they are finished speaking. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> There is latency induced in both the client and server software processing. This is necessary, but can be tuned to minimize the delay and still get good server performance. The biggest variable in latency is the Internet itself. Clients communicate only with the media server, so the latency between the client and the media server is the essential factor. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Eliminating latency for Internet voice communications involves bending the Internet itself to your will. One way to make this possible is to use centralized servers, so at least one endpoint is fixed. This endpoint needs to be extremely well connected to all ends of the Internet, and needs to be on a network that has minimal end-to-end latency. The idea is for the latency to be deterministic (that is, stay on a homogenous network) for as much of the trip as possible. As latency problems are identified, they can be addressed by instituting peering relationships between the network hosting the server and the network experiencing problems. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> As discussed above, an atom is a reference to the data packet from which it was derived. According to one embodiment, the atom refers to a portion of a packet by referring to the packet and an offset value in that packet. According to a more specific embodiment, the atom size is the frame size of the particular codec (e.g., Pure Voice from Qualcomm of San Diego, Calif.). Being able to break up packets into smaller portions reduces the average latency per unit of data for high speed clients because of the ability to buffer smaller chunks of data. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the second stage of board <highlight><bold>700</bold></highlight> includes a plurality of schedulers chips <highlight><bold>704</bold></highlight>, one for each client currently participating in a conference on the media server. Each scheduler chip <highlight><bold>704</bold></highlight> subscribes to the output of receiver chip <highlight><bold>702</bold></highlight>. Scheduler chips <highlight><bold>704</bold></highlight> take the incoming atoms, select only those coming from the associated client, schedule when those atoms should be played, and place them in a queue. The selection of atoms from among all incoming atoms in the mesh is not as inefficient as it might first appear because of the fact that listeners typically outnumber talkers by a wide margin. The scheduling is done with respect to the RTP header info pointed to by the atom. That is, for example, if it is noted that packets are being dropped or are late from a particular client, the size of the buffer for that client can be increased which, while increasing latency for that client, improves sound quality. The idea is to minimize latency while maximizing voice quality. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> According to a specific embodiment, the scheduler keeps track of and maintains the priority of each participant in each conference. That is, the scheduler maintains the priority field in each atom for each participant. According to one embodiment, the priority field of a participant&apos;s atoms changes dynamically according to a fairness algorithm which monitors the amount of talking by a particular client. That is, the longer a client talks the lower its priority decays, while the less a client talks, the higher its priority remains. This gives high priority, for example to a client which interrupts another that has been talking for awhile. According to a more specific embodiment, hysteresis is also built into the system to allow a client to build its priority back. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> As will be understood, the priority field may be used in a variety of ways. For example, the highest priority could be assigned to an instructor in a classroom conference. That is, different classes or ranges of priority could be defined in which the fairness and hysteresis algorithms are independently implemented. In the case of the classroom conference, the teacher&apos;s priority would always be above those of the students. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Priority fields may also be used to insert high priority traffic into a conference such as, for example, an emergency broadcast. Other high priority traffic could include, for example, an audio advertisement directing the members of the conference to execute some action, e.g., key the microphone twice, if they wish to go to some remote site. The dispatch mechanism of the present invention could then be used to effect the transfer. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> Fairness and hysteresis could be further combined with multiple priority ranges to implement, for example, a panel discussion (first priority range) with a moderator (highest priority range) and an audience (lowest priority range), with a microphone for audience members to participate (yet another range). </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> The third stage of board <highlight><bold>700</bold></highlight> includes a plurality of sorter chips <highlight><bold>706</bold></highlight>, one for each conference on the media server. Each sorter chip <highlight><bold>706</bold></highlight> subscribes to the output of each of scheduler chips <highlight><bold>704</bold></highlight> associated with the conference to which the sorter chip corresponds. That is, each sorter chip <highlight><bold>706</bold></highlight> receives input from all of the clients currently participating in its conference and organizes them according to priorities (as determined from the atom&apos;s priority field). </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Referring once again to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the fourth stage of board <highlight><bold>700</bold></highlight> includes a plurality of filter chips <highlight><bold>708</bold></highlight>, one for each client currently participating in a conference on the media server. Each sorter chip <highlight><bold>706</bold></highlight> from the previous stage sends its output to each filter chip <highlight><bold>708</bold></highlight> associated with the conference to which the sorter chip corresponds. The purpose of filter chip <highlight><bold>708</bold></highlight> is to exclude the voice of the associated client so that the user does not hear her own voice. This is done by dropping all atoms identifying the corresponding client. According to a specific embodiment, filter chip <highlight><bold>708</bold></highlight> is also be used to exclude the voice of others in response to an ignore request(s) from the associated client. That is, a particular client may right-click on the name of a particular member of the conference in their user interface and select the ignore option. The selection of the ignore option is transmitted through the client host to the groups service on the media server which reconfigures the mesh service (specifically the client&apos;s filter chip <highlight><bold>708</bold></highlight>) to exclude both the original client&apos;s voice and the voice of the party selected by that client. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> The fifth and final stage of board <highlight><bold>700</bold></highlight> is a plurality of sender chips <highlight><bold>710</bold></highlight>, one for each client. Each sender chip <highlight><bold>710</bold></highlight> is connected to a single corresponding filter chip <highlight><bold>708</bold></highlight> and is used to convert the received atoms back into RTP packets and send the packets out to the associated client. In the embodiments in which only n voices are supported at a time, the sender chip picks the atoms corresponding to the first n users in the list, converts them to RTP packets, and sends them to the client. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Each of the chips in the board <highlight><bold>700</bold></highlight> is extremely simple and has a simple job to perform. However, depending upon how they are configured on the board, complex and sophisticated functionalities may be realized. For example and as discussed above, the flexibility of this approach allows the board to be configured to implement arenas, class room conferences, panel discussions, point-to-point communication, etc. Moreover, chips may be added without affecting the manner in which the other chips on the board operate. For example, one such chip could communicate with a DSP card which could mix any number of voices. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> As mentioned above with reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the groups service on the media server defines how the mesh service is configured for the audio conference embodiment. That is, the groups service calls the mesh methods which create, configure and connect the chips in the audio conference mesh service. The groups service essentially keeps track of all the clients in each group, i.e., conference. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> When notified by the slave service that a new conference is being created, the groups service triggers creation by the mesh service of a corresponding sorter object and the appropriate interconnections. For each new client added to a conference, the groups service triggers creation by the mesh service of all of the corresponding mesh objects (i.e., the scheduler, filter, and sender objects) and their interconnections. The calls for creation and release of the objects and connections in the mesh are queued in the groups service and sent to the mesh service between clock transitions. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> A specific point-to-point embodiment of the invention will now be described with reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. As mentioned above, a point-to-point service is interchangeable with the groups service and defines how the mesh service is configured for the point-to-point embodiment. As the name implies, the point-to-point embodiment uses the system of the present invention to enable point-to-point communication between two clients. As will be understood, point-to-point communication via the present invention has many useful applications such as, for example, a viable alternative to computer telephony. Other applications include, for example, customer support functions in which a client can directly communicate with a customer representative by selecting an object at a company web site. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> The point-to-point board <highlight><bold>800</bold></highlight> is a three stage board having a receiver chip <highlight><bold>802</bold></highlight> for each type of media supported by the server. The operation of receiver chip <highlight><bold>802</bold></highlight> is substantially the same as that of receiver chip <highlight><bold>702</bold></highlight> described above. That is, receiver chip <highlight><bold>802</bold></highlight> listens for media data on a specific port, e.g., UDP <highlight><bold>3450</bold></highlight> or UDP <highlight><bold>7000</bold></highlight>, and transforms the received data to atoms, i.e., the fundamental unit of data in the mesh. The second stage of point-to-point board <highlight><bold>800</bold></highlight> includes a scheduler chip <highlight><bold>804</bold></highlight> for each client currently engaging in a point-to-point communication. As with scheduler chip <highlight><bold>704</bold></highlight> described above, each scheduler chip <highlight><bold>804</bold></highlight> takes the incoming atoms, selects only those coming from the associated client, schedules when those atoms should be played, and places them in a queue. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> The third and final stage of board <highlight><bold>800</bold></highlight> includes a sender chip <highlight><bold>806</bold></highlight> for each client on the media server. Each sender chip <highlight><bold>806</bold></highlight> is connected to a single scheduler chip <highlight><bold>804</bold></highlight> and is used to convert the received atoms back into the appropriate form for transmission to the associated client. However, unlike the group conference embodiment discussed above, the scheduler chip <highlight><bold>804</bold></highlight> which queues the atoms from client <highlight><bold>1</bold></highlight> is connected to the sender chip <highlight><bold>806</bold></highlight> for client <highlight><bold>2</bold></highlight>, and vice versa. That is, the data stream from client <highlight><bold>1</bold></highlight> is transmitted to client <highlight><bold>2</bold></highlight>, while the data stream from client <highlight><bold>2</bold></highlight> is transmitted to client <highlight><bold>1</bold></highlight>. This implementation avoids the need for the sorter and filter stages of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Of course, it will be understood that the group conference embodiment discussed above with reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference> may be employed to implement a point-to-point communication. That is, the number of participants in each point-to-point conference would be two. The point-to-point embodiment of <cross-reference target="DRAWINGS">FIG. 8</cross-reference> merely represents a less complex, alternative embodiment. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> A mesh configuration for a conference embodiment with a high priority feed is shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. As discussed above, certain data streams from specific clients or sources may be given a higher priority than other data streams for the purpose of playing those streams to all or some subset of clients at any given time. Conference board <highlight><bold>900</bold></highlight> is constructed and operates similarly to conference board <highlight><bold>700</bold></highlight> with the addition of a high priority scheduler <highlight><bold>902</bold></highlight> by which high priority data streams from, for example, an audio advertisement repository <highlight><bold>904</bold></highlight> or the Emergency Broadcast System <highlight><bold>906</bold></highlight> may be inserted. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> A mesh configuration for a classroom embodiment of the invention is shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. In this embodiment, classroom board <highlight><bold>1000</bold></highlight> is configured and operates much like conference board <highlight><bold>700</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> with each sorter corresponding to a particular class. In this case, however, the data stream from the instructor is given a higher priority than each of the students. As represented by the dashed line <highlight><bold>1002</bold></highlight> which includes the instructor&apos;s scheduler <highlight><bold>1004</bold></highlight>, the instructor&apos;s priority remains above that of any student regardless of whether or not fairness and hysteresis algorithms are implemented. That is, no matter how high a student&apos;s priority gets (e.g., from remaining silent), or how low the instructor&apos;s priority decays (e.g., from talking), the instructor&apos;s priority will always exceed that of the student&apos;s. A single media server can handle one or multiple such classrooms. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> A mesh configuration <highlight><bold>1100</bold></highlight> for a panel discussion embodiment of the invention is shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. In this embodiment, the clients are arranged in two different priority groups, the higher priority panel (indicated by dashed line <highlight><bold>1102</bold></highlight>) and the lower priority audience (indicated by dashed line <highlight><bold>1104</bold></highlight>). Fairness and hysteresis are implemented within each group such that, for example, the data streams for the three panel members are prioritized relative to each other in the manner described above. In this configuration, the panel members are always heard by the audience members, while the audience members will occasionally also hear other audience members. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> As with the classroom embodiment described above, there is no overlap in the priority ranges of the respective groups. Sorter <highlight><bold>1</bold></highlight> corresponds to the panel and only receives input from the schedulers corresponding to the members of the panel. Sorter <highlight><bold>2</bold></highlight>, which receives the data streams from all of the audience members, also receives the data streams of the panel members from the output of sorter <highlight><bold>1</bold></highlight> for transmission to the audience members. A single media server can handle one or multiple such panel discussions. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> A mesh configuration <highlight><bold>1200</bold></highlight> for another panel discussion embodiment of the invention is shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. In this embodiment, however, the audience is divided into &ldquo;rows&rdquo; (<highlight><bold>1204</bold></highlight> and <highlight><bold>1206</bold></highlight>) in which the member clients each have the same priority range, and in which a client receives only the data streams of panel <highlight><bold>1202</bold></highlight> and the other clients in the same row. With regard to the interaction between each individual row and the panel, the operation is similar to that described above for the audience and the panel. That is, the panel members are always heard by the clients of each row, while the clients in a particular row will occasionally also hear other clients in their row. By contrast, clients of a particular row will not hear any of the clients in other rows. A single media server can handle one or multiple such panel discussions. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> A specific embodiment of the client for use with the group conference embodiment of the invention will now be described with reference to <cross-reference target="DRAWINGS">FIGS. 13 and 14</cross-reference>. According to a specific embodiment, the user interface <highlight><bold>1300</bold></highlight> is a standard Microsoft list control as shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> with conference member names and associated icons <highlight><bold>1302</bold></highlight> listed. The client&apos;s user&apos;s icon and name are at the top of the list and the user&apos;s icon is highlighted, e.g., circled. When anybody else in the conference speaks their icon is also highlighted, e.g., background color changes, indicating that they are currently speaking. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> According to one embodiment, traffic conditions are monitored for each client (e.g., by looking at dropped packets) and an indicator <highlight><bold>1304</bold></highlight>, e.g., a traffic signal, is displayed next to their name in the list box which represents the quality of the user&apos;s connection to the server. This could be a traditional red-yellow-green traffic signal, or, alternatively, 1-3 green lights with more lights indicating a better connection. Interface <highlight><bold>1300</bold></highlight> includes a text message box <highlight><bold>1306</bold></highlight> at the bottom of the list window which displays messages such as &ldquo;Hold down Ctrl key to talk&rdquo; or &ldquo;Server disconnected&rdquo;. Up the right hand side of interface <highlight><bold>1300</bold></highlight> is a level meter <highlight><bold>1308</bold></highlight> which represents the audio level of what the user is recording when she&apos;s recording, or what the user is hearing when she&apos;s listening. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The block diagram of <cross-reference target="DRAWINGS">FIG. 14</cross-reference> illustrates the client architecture according to a specific embodiment of the invention. The client <highlight><bold>1400</bold></highlight> is either an OCX (Active X Control for Microsoft&apos;s Internet Explorer) or a DLL (i.e., a Netscape plug-in). The size of client <highlight><bold>1400</bold></highlight> is relatively small (&lt;150 k for the OCX or &tilde;230 k for the DLL). According to various specific embodiments, both are run by the client&apos;s web browser. It will be understood, however, that because it is designed as a generic plug-in, the OCX can be embedded in other applications as well. Client <highlight><bold>1400</bold></highlight> is also designed to allow the customer service provider to embed code into a web page which is recognized by the client&apos;s browser as an OCX object or a DLL object. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> A portion of the architecture of client <highlight><bold>1400</bold></highlight> is standard code for all applications which want to conform to the interfaces of Internet Explorer and Netscape Navigator. In addition, client <highlight><bold>1400</bold></highlight> accepts a plurality of parameters from the referring customer web page, i.e., the page through which the client gains access to the NOC. The first parameter is the server address of the server the customer wants the client to call, e.g., the dispatch server or the authentication server at the NOC. The second parameter is a user name associated with client <highlight><bold>1400</bold></highlight>. That is, if the referring page has the user&apos;s name already, that information is passed to the conferencing system via client <highlight><bold>1400</bold></highlight> and the user is not asked for his name. The third parameter is the conference name which is how group membership is decided. The fourth parameter called Auto Join calls a join method in client <highlight><bold>1400</bold></highlight> when set to true (the default is true). The fifth parameter is an account number which is reported to the join command and which is used for verification purposes as described above. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> An object class called Soundcard <highlight><bold>1402</bold></highlight> controls a speaker <highlight><bold>1404</bold></highlight> and records data from a microphone <highlight><bold>1406</bold></highlight>. According to a specific embodiment, Soundcard <highlight><bold>1402</bold></highlight> is standard Windows code. An object class called Mixer <highlight><bold>1408</bold></highlight> goes along with Soundcard <highlight><bold>1402</bold></highlight> and controls the recording level and microphone input level. An object class called Sequencer <highlight><bold>1410</bold></highlight> is a playback item which receives packets from RTP channel <highlight><bold>1411</bold></highlight> and converts them for playback by Soundcard <highlight><bold>1402</bold></highlight> on speaker <highlight><bold>1404</bold></highlight>. A class called Collector <highlight><bold>1412</bold></highlight> is a recording item which collects data from Soundcard <highlight><bold>1402</bold></highlight> and converts the data to packets to be sent by the upstream RTP channel <highlight><bold>1413</bold></highlight>. A Conference object <highlight><bold>1416</bold></highlight> communicates with the NOC servers. Graphical user interface (GUI) <highlight><bold>1418</bold></highlight> is essentially a list control object as described above. An Audio object <highlight><bold>1420</bold></highlight> is used by Conference object <highlight><bold>1416</bold></highlight> to start and stop recording. As mentioned above, RTP channels <highlight><bold>1411</bold></highlight> and <highlight><bold>1413</bold></highlight> pass data downstream and upstream. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> According to a specific embodiment, the control key is the mechanism used to control the microphone. That is, according to this embodiment, the client hooks the control key across the entire operating system and uses it to control the microphone. This simple but effective mechanism is easy to learn, straightforward to operate, and requires far less manual dexterity than mouse-based schemes. In addition, by defaulting the client to a &ldquo;normally off&rdquo; microphone state, transmit bandwidth is substantially reduced and feedback caused by loudspeakers feeding into the microphone is greatly reduced. Significantly, this mechanism works regardless of the application which is active in the foreground. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> According to a specific embodiment of the invention, when a user interrupts another user by pressing her control key to talk, the stream (or run) of speech of the interrupted user to the interrupting user is terminated so that the interrupter does not have both her microphone and her speaker active at the same time. However, any new runs by other speakers are played so that the new speaker may himself be interrupted. If the new speaker lets go of the control key, any of the interrupted streams still going on will resume being played to the interrupting user. This &ldquo;smart duplexing&rdquo; feature avoids a speaker being interrupted by his own voice (through the interrupter&apos;s microphone). According to a specific embodiment, the filter chip corresponding to the interrupter is reconfigured in response to the interrupter pressing the control key, to ignore the data streams from any interrupted speakers, i.e., to drop the atoms corresponding to the interrupted speakers. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> According to another specific embodiment of the invention, a user can double click on the names of other members of the conference to effect private instant text messaging with that client. In one embodiment, the transmission of the message is facilitated by the groups service and is effected over the TCP channel which remains open with the client proxy on the server. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a simplified diagram of a network environment <highlight><bold>1500</bold></highlight> in which the present invention may be implemented. A network operating center (NOC) <highlight><bold>100</bold></highlight> is connected to the Internet <highlight><bold>1502</bold></highlight> via a high bandwidth backbone <highlight><bold>1504</bold></highlight>. NOC <highlight><bold>100</bold></highlight> includes an authentication server <highlight><bold>106</bold></highlight>, at least one dispatch server <highlight><bold>102</bold></highlight>, and a plurality of media servers <highlight><bold>104</bold></highlight>. Backbone <highlight><bold>1504</bold></highlight> may comprise, for example, a fiber optic data center such as that provided by Qwest Communications, Inc. of Denver, Colo. Internet sites <highlight><bold>1506</bold></highlight> through which clients <highlight><bold>1508</bold></highlight> may engage the services made possible by the present invention are connected to the Internet <highlight><bold>1502</bold></highlight> as well as directly to backbone <highlight><bold>1504</bold></highlight>. Sites <highlight><bold>1506</bold></highlight> may represent, for example, web sites maintained by Internet Service Providers (ISPs). Clients may be directly connected to the Internet as shown, or, for example, via a local or wide area network <highlight><bold>1510</bold></highlight>. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a block diagram of a generalized computer system <highlight><bold>1600</bold></highlight> which may be used to implement the various servers and clients described herein. Attached to system bus <highlight><bold>1620</bold></highlight> are a wide variety of subsystems. Processor(s) <highlight><bold>1622</bold></highlight> (also referred to as central processing units, or CPUs) are coupled to storage devices including memory <highlight><bold>1624</bold></highlight>. Memory <highlight><bold>1624</bold></highlight> includes random access memory (RAM) and read-only memory (ROM). As is well known in the art, ROM acts to transfer data and instructions uni-directionally to the CPU and RAM is used typically to transfer data and instructions in a bi-directionally manner. Both of these types of memories may include any suitable ones of the computer-readable media described below. A fixed disk <highlight><bold>1626</bold></highlight> is also coupled bi-directionally to CPU <highlight><bold>1622</bold></highlight>; it provides additional data storage capacity and may also include any of the computer-readable media described below. Fixed disk <highlight><bold>1626</bold></highlight> may be used to store programs, data and the like and is typically a secondary storage medium (such as a hard disk) that is slower than primary storage. It will be appreciated that the information retained within fixed disk <highlight><bold>1626</bold></highlight>, may, in appropriate cases, be incorporated in standard fashion as virtual memory in memory <highlight><bold>1624</bold></highlight>. Removable disk <highlight><bold>1614</bold></highlight> may take the form of any of the computer-readable media described below. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> CPU <highlight><bold>1622</bold></highlight> may also be coupled to a variety of input/output devices such as display <highlight><bold>1604</bold></highlight>, keyboard <highlight><bold>1610</bold></highlight>, mouse <highlight><bold>1612</bold></highlight> and speakers <highlight><bold>1630</bold></highlight>. In general, an input/output device may be any of: video displays, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styluses, voice or handwriting recognizers, biometrics readers, or other computers. CPU <highlight><bold>1622</bold></highlight> optionally may be coupled to another computer or telecommunications network using network interface <highlight><bold>1640</bold></highlight>. With such a network interface, it is contemplated that the CPU might receive information from the network, or might output information to the network in the course of performing the above-described method steps. Furthermore, method embodiments of the present invention may execute solely upon CPU <highlight><bold>1622</bold></highlight> or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> In addition, embodiments of the present invention further relate to computer storage products with a computer-readable medium that have computer code thereon for performing various computer-implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention, or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer-readable media include, but are not limited to: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs and holographic devices; magneto-optical media such as floptical disks; and hardware devices that are specially configured to store and execute program code, such as application-specific integrated circuits (ASICs), programmable logic devices (PLDs) and ROM and RAM devices. Examples of computer code include machine code, such as produced by a compiler, and files containing higher level code that are executed by a computer using an interpreter. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> While the invention has been particularly shown and described with reference to specific embodiments thereof, it will be understood by those skilled in the art that changes in the form and details of the disclosed embodiments may be made without departing from the spirit or scope of the invention. For example, embodiments of the invention have been described with reference to the object oriented Java programming language and development tools. It will be understood, however, that the principles of the present invention may be embodied using a variety of other software paradigms including, for example, other object oriented programming languages and tools. Moreover, merely because specific embodiments of the invention have been described with reference to communications over the Internet and/or the World Wide Web does not restrict the scope of the invention to such implementations. On the contrary, the scope of the invention encompasses a much broader interpretation of network environments including, for example, local area and wide area networks. Therefore, the scope of the invention should be determined with reference to the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for facilitating communication between a plurality of clients on a network, comprising: 
<claim-text>receiving a request with a dispatch server, the request being from a first one of the plurality of clients to join a first conference; and </claim-text>
<claim-text>statelessly dispatching the first client to the first conference on a first one of a plurality of media servers associated with the dispatch server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> further comprising determining whether the first conference is currently being facilitated on any of the media servers. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002"><claim-text>claim 2</claim-text></dependent-claim-reference> wherein determining whether the first conference is currently being facilitated on any of the media servers comprises polling the media servers and receiving a response from the first media server. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002"><claim-text>claim 2</claim-text></dependent-claim-reference> further comprising triggering creation of the first conference on the first media server where the first conference is not currently being facilitated on any of the media servers. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004"><claim-text>claim 4</claim-text></dependent-claim-reference> further comprising determining which of the plurality of media servers has the most available capacity for creation of the first conference and receiving a response from the first media server. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005"><claim-text>claim 5</claim-text></dependent-claim-reference> wherein determining which of the plurality of media servers has the most available capacity is done with reference to a media type associated with the first conference. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005"><claim-text>claim 5</claim-text></dependent-claim-reference> wherein determining which of the plurality of media servers has the most available capacity is done with reference to a number of users associated with the first conference. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> further comprising: 
<claim-text>receiving an initial request with an authentication server, the initial request being from the first client to join the first conference; </claim-text>
<claim-text>validating the initial request; and </claim-text>
<claim-text>dispatching the first client to the dispatch server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008"><claim-text>claim 8</claim-text></dependent-claim-reference> wherein validating the initial request comprises validating an authentication code associated with the initial request. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009"><claim-text>claim 9</claim-text></dependent-claim-reference> wherein the first client obtains the authentication code from a referring host. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008"><claim-text>claim 8</claim-text></dependent-claim-reference> wherein validating the initial request is done with reference to a communication from a referring host alerting the first media server that the first client will be transmitting a subsequent request to the first media server. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> further comprising maintaining a list of the media servers in a memory associated with the dispatch server. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00012"><claim-text>claim 12</claim-text></dependent-claim-reference> wherein maintaining the list comprises adding a particular media server to the list when the particular media server registers with the dispatch server. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> further comprising alerting the first media server that the first client will be transmitting a subsequent request to the first media server. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00014"><claim-text>claim 14</claim-text></dependent-claim-reference> wherein alerting the first media server comprises causing an entry corresponding to the first client to be entered in a will call list associated with the first media server. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> further comprising monitoring a signal indicative of an operational status of the dispatch server. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00016"><claim-text>claim 16</claim-text></dependent-claim-reference> wherein monitoring the signal comprises establishing direct communication between the dispatch and standby servers. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00016"><claim-text>claim 16</claim-text></dependent-claim-reference> further comprising replacing the dispatch server with a standby server where the operational status of the dispatch server indicates a failure. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00018"><claim-text>claim 18</claim-text></dependent-claim-reference> wherein replacing the dispatch server with the standby server comprises disconnecting the dispatch server from the network and allowing the standby server to take over the IP address of the dispatch server. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> wherein dispatching the first client to the first conference on the first media server comprises transmitting an IP address associated with the first media server to the first client. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> further comprising transmitting information regarding other participants in the first conference to the first client. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00021"><claim-text>claim 21</claim-text></dependent-claim-reference> wherein transmitting information comprises adding a user to a user interface associated with the first client when a second client joins the first conference. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022"><claim-text>claim 22</claim-text></dependent-claim-reference> wherein transmitting information further comprises deleting the user from the user interface when the second client leaves the first conference. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> further comprising where an event associated with the first media server occurs, dynamically recreating the first conference on a second media server. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00024"><claim-text>claim 24</claim-text></dependent-claim-reference> wherein dynamically recreating the first conference comprises statelessly dispatching each participant in the first conference to the second media server. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00024"><claim-text>claim 24</claim-text></dependent-claim-reference> wherein the event comprises a failure of the first media server. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00024"><claim-text>claim 24</claim-text></dependent-claim-reference> wherein the event relates to a capacity of the first media server. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001"><claim-text>claim 1</claim-text></dependent-claim-reference> further comprising monitoring latency data relating to the first conference. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00028"><claim-text>claim 28</claim-text></dependent-claim-reference> further comprising adjusting a capacity associated with the first media server in response to the latency data. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A system for facilitating communication between a plurality of clients on a network, comprising: 
<claim-text>a plurality of media servers coupled to the network, each media server being for facilitating at least one conference, each of the conferences corresponding to a subset of the plurality of clients; and </claim-text>
<claim-text>a dispatch server coupled to the network for statelessly dispatching the clients to the conferences on the media servers, the dispatch server being operable in response to a request from a first one of the clients to join a first conference to do one of determine which of the media servers is facilitating the first conference, and trigger creation of the first conference on a first one of the media servers where the first conference is not currently being facilitated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00030"><claim-text>claim 30</claim-text></dependent-claim-reference> further comprising an authentication server for receiving an initial request from the first client to join the first conference, validating the initial request, and dispatching the first client to the dispatch server. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00030"><claim-text>claim 30</claim-text></dependent-claim-reference> further comprising a standby server for replacing the dispatch server where an operational status of the dispatch server indicates a failure. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00032"><claim-text>claim 32</claim-text></dependent-claim-reference> further comprising a local area network connecting the standby and dispatch servers for communicating the operational status. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A dispatch server for facilitating communication between a plurality of clients on a network using a plurality of media servers on the network, comprising: 
<claim-text>a server object; </claim-text>
<claim-text>a remote server service running on the server object for providing access to the server object; and </claim-text>
<claim-text>a master service running on the server object for communicating with and managing operation of the media servers in a stateless manner, the master service also being for statelessly dispatching the plurality of clients to conferences on the media servers. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The dispatch server of <dependent-claim-reference depends_on="CLM-00034"><claim-text>claim 34</claim-text></dependent-claim-reference> further comprising a client host service running on the server object for facilitating connection of the plurality of clients with the dispatch server. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The dispatch server of <dependent-claim-reference depends_on="CLM-00034"><claim-text>claim 34</claim-text></dependent-claim-reference> further comprising a slave service for communicating with the master service. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A media server for facilitating communication between a plurality of clients on a network in conjunction with a dispatch server on the network, comprising: 
<claim-text>a server object; </claim-text>
<claim-text>a remote server service running on the server object for providing access to the server object; </claim-text>
<claim-text>a slave service running on the server object for communicating with the dispatch server; </claim-text>
<claim-text>a mesh service running on the server object for dynamically providing virtual connections among the plurality of clients for transmission of data and thereby facilitating a conference including the plurality of clients, the virtual connections being dynamically created using a plurality of connection objects; and </claim-text>
<claim-text>a connect service running on the server object for configuring the connection objects in the mesh service to provide the virtual connections. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The media server of <dependent-claim-reference depends_on="CLM-00037"><claim-text>claim 37</claim-text></dependent-claim-reference> further comprising a client host service running on the server object for facilitating connection of the plurality of clients with the media server. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. A method for facilitating a first conference between a plurality of clients on a network, comprising: 
<claim-text>receiving a request to join a first conference from a first one of the plurality of clients via the network; </claim-text>
<claim-text>in response to the request, determining whether the first conference is currently being facilitated on any of a plurality of media servers; </claim-text>
<claim-text>where the first conference is currently being facilitated on a first one of the plurality of media servers, statelessly dispatching the first client to the first conference on the first media server; and </claim-text>
<claim-text>where the first conference is not currently being facilitated on any of the plurality of media servers, triggering creation of the first conference on a second one of the plurality of media servers and statelessly dispatching the first client to the first conference on the second media server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A mesh service for running on a server object on a media server, the media server for facilitating a plurality of conferences among a plurality of clients, the mesh service for dynamically providing virtual connections among the plurality of clients and thereby facilitating the conferences, the mesh service comprising: 
<claim-text>a receiver object for each type of media handled by the mesh service, the receiver object being operable to receive first data packets from each of the plurality of clients, and convert the first data packets to data units; </claim-text>
<claim-text>a plurality of scheduler objects coupled to the receiver object, each of the scheduler objects being associated with one of the plurality of clients, each scheduler object being operable to receive the data units from the receiver object, select first data units corresponding to the associated client from among the data units, and schedule when the first data units should be transmitted; </claim-text>
<claim-text>a plurality of sorter objects coupled to the scheduler objects, each of the sorter objects being associated with one of the conferences, each sorter object being operable to receive the first data units from selected ones of the scheduler objects associated with the associated conference, and organize the first data units according to priorities; </claim-text>
<claim-text>a plurality of filter objects coupled to sorter objects, each of the filter objects being associated with one of the plurality of clients, each filter object being operable to receive the first data units from each of the sorter objects, and select second data units from among the first data units, the second data units excluding any of the first data units corresponding to the associated client; and </claim-text>
<claim-text>a plurality of sender objects coupled to the filter objects, each of the sender objects being associated with one of the plurality of clients, each sender object being operable to receive the second data units from one of the filter objects which corresponds to the associated client, convert the second data units into second data packets, and transmit the second data packets to the associated client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The mesh service of <dependent-claim-reference depends_on="CLM-00040"><claim-text>claim 40</claim-text></dependent-claim-reference> wherein the receiver, scheduler, sorter, filter and sender objects are derived from a common connection object comprising an input method for subscribing to an output of a first connection object and receiving data units therefrom, an output method for transmitting the data units to a second connection object subscribing to the output method, and a clock method for moving the data units from the input method to the output method. </claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. A mesh service for running on a media server, the media server for facilitating communication among a plurality of clients, the mesh service comprising: 
<claim-text>a receiver object for receiving first data packets and converting the first data packets to data units; </claim-text>
<claim-text>a scheduler object for receiving the data units, selecting first data units corresponding to an associated client from among the data units, and scheduling when the first data units should be transmitted; </claim-text>
<claim-text>a sorter object for receiving the first data units, and organizing the first data units according to priorities; </claim-text>
<claim-text>a filter object for receiving the first data units, and selecting second data units from among the first data units, the second data units excluding any of the first data units corresponding to an associated client; and </claim-text>
<claim-text>a sender object for receiving the second data units, converting the second data units into second data packets, and transmitting the second data packets to an associated client; </claim-text>
<claim-text>wherein the receiver, scheduler, sorter, filter, and sender objects are each derived from a common connection object and are dynamically configured to provide virtual connections among the plurality of clients. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. A mesh service for running on a media server, the media server for facilitating communication among a plurality of clients, the mesh service comprising: 
<claim-text>a receiver object for receiving first data packets and converting the first data packets to data units; </claim-text>
<claim-text>a scheduler object for receiving the data units, selecting first data units corresponding to an associated client from among the data units, and scheduling when the first data units should be transmitted; and </claim-text>
<claim-text>a sender object for receiving the first data units, converting the first data units into second data packets, and transmitting the second data packets to an associated client; </claim-text>
<claim-text>wherein the receiver, scheduler, and sender objects are each derived from a common connection object and are dynamically configured to provide virtual connections among the plurality of clients. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. A mesh service for running on a media server, the media server for facilitating communication among a plurality of clients, the mesh service comprising a plurality of instances of a connection object class comprising an input method for subscribing to an output of a first connection object and receiving data units therefrom, an output method for transmitting the data units to a second connection object subscribing to the output method, and a clock method for moving the data units from the input method to the output method, wherein the plurality of instances of the connection object class are dynamically configured to provide virtual connections among the plurality of clients. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. A method for facilitating communication among a plurality of clients on a media server, comprising dynamically configuring a plurality of instances of a connection object to provide virtual connections among the plurality of clients, the connection object class comprising an input method for subscribing to an output of a first connection object and receiving data units therefrom, an output method for transmitting the data units to a second connection object subscribing to the output method, and a clock method for moving the data units from the input method to the output method. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00045"><claim-text>claim 45</claim-text></dependent-claim-reference> wherein the plurality of instances of the connection object class comprises a receiver object for receiving first data packets and converting the first data packets to data units, a plurality of scheduler objects for selecting first data units corresponding to an associated client from among the data units, and scheduling when the first data units should be transmitted, and a plurality of sender objects for receiving the scheduled first data units, converting the selected first data units into second data packets, and transmitting the second data packets to an associated client, and wherein dynamically configuring the plurality of instances comprises coupling the receiver object to the scheduler objects and coupling the scheduler objects to the sender objects. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00046"><claim-text>claim 46</claim-text></dependent-claim-reference> wherein the plurality of instances of the connection object class further comprises a plurality of sorter objects for organizing the first data units according to priorities, each of the sorter objects corresponding to an associated conference, the connection object class further comprising a plurality of filter objects for excluding any of the first data units corresponding to an associated client thereby resulting in the selected first data units, and wherein coupling the scheduler objects to the sender objects is done using the sorter and filter objects. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. A method for facilitating a first conference on a network between a first client and at least one other client, comprising: 
<claim-text>transmitting a first request to join the first conference to a dispatch server via the network; </claim-text>
<claim-text>receiving a dispatch command from the dispatch server, the dispatch command identifying a first one of a plurality of media servers; </claim-text>
<claim-text>transmitting a second request to join the first conference to the first media server in response to the dispatch command from the dispatch server; and </claim-text>
<claim-text>establishing a connection with the first media server by which the first client may participate in the first conference. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. A computer program product for facilitating a first conference on a network between a first client and at least one other client, comprising: 
<claim-text>at least one computer readable medium; </claim-text>
<claim-text>computer program instructions embedded in the at least one computer readable medium for causing a computer to: </claim-text>
<claim-text>transmit a first request to join the first conference to a dispatch server via the network; </claim-text>
<claim-text>receive a dispatch command from the dispatch server, the dispatch command identifying a first one of a plurality of media servers; </claim-text>
<claim-text>transmit a second request to join the first conference to the first media server in response to a dispatch command from the dispatch server; and </claim-text>
<claim-text>establish a connection with the first media server by which the first client may participate in the first conference. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00049"><claim-text>claim 49</claim-text></dependent-claim-reference> wherein the computer program instructions comprise a browser plug-in. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00050"><claim-text>claim 50</claim-text></dependent-claim-reference> wherein the browser plug-in comprises a DLL. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00050"><claim-text>claim 50</claim-text></dependent-claim-reference> wherein the browser plug-in comprises an OCX. </claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. A method for transmitting the computer program instructions of <dependent-claim-reference depends_on="CLM-00049"><claim-text>claim 49</claim-text></dependent-claim-reference>, comprising: 
<claim-text>storing the computer program instructions onto a computer-usable medium; </claim-text>
<claim-text>receiving a request for transmission of the computer program instructions; and </claim-text>
<claim-text>transmitting the computer program instructions over a network to a remote location. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. A computer data signal embodied in a carrier wave and representing program instructions which, when executed by a processor, cause the processor to facilitate a first conference on a network between a first client and at least one other client by: 
<claim-text>transmitting a first request to join the first conference to a dispatch server via the network; </claim-text>
<claim-text>receiving a dispatch command from the dispatch server, the dispatch command identifying a first one of a plurality of media servers; </claim-text>
<claim-text>transmitting a second request to join the first conference to the first media server in response to a dispatch command from the dispatch server; and </claim-text>
<claim-text>establishing a connection with the first media server by which the first client may participate in the first conference. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. A method for facilitating a first conference on a network between a first client and at least one other client, comprising: 
<claim-text>transmitting a graphical user interface to the first client via the network, the graphical user interface including an object corresponding to the first conference; and </claim-text>
<claim-text>transmitting first data to the first client via the network, the first data identifying a remote conferencing system, the remote conferencing system including a plurality of media servers coupled to the network, and a dispatch server coupled to the network for statelessly dispatching the first client to the first conference on one of the media servers, the dispatch server being operable in response to a request from the first client to join the first conference to do one of determine which of the media servers is facilitating the first conference, and create the first conference on a first one of the media servers where the first conference is not currently being facilitated. </claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20010009014A1-20010719-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20010009014A1-20010719-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20010009014A1-20010719-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20010009014A1-20010719-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20010009014A1-20010719-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20010009014A1-20010719-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20010009014A1-20010719-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20010009014A1-20010719-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20010009014A1-20010719-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20010009014A1-20010719-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20010009014A1-20010719-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20010009014A1-20010719-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20010009014A1-20010719-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20010009014A1-20010719-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>

