[create-ds]
command1=create-ds <ds-name>
description1=Creates a new datastore with the specified name
param1_1=<ds-name> : name of datastore

[create-collection]
command1=create-collection <ds-name>.<collection-name> [on-disk | in-memory | in-memory-non-durable]
description1=Creates a new collection with the specified name using the specified storage queryCode
param1_1=<ds-name> : name of an existent datastore
param1_1=<collection-name> : name of new collection
param1_2=<storage-queryCode> : storage engine to use for the collection. One of [on-disk, in-memory, in-memory-non-durable]

[load-data]
command1=load-data <ds-name>.<collection-name> <file | url> [csv | sql | json | xml | text] (format-specific-params)
description1=loads data from the specified file or url into the specified collection
param1_1=<ds-name> : name of an existing datastore
param1_2=<ds-collection> : name of an existing collection
param1_3=<file | url> : absolute file system path, or public url of data file
param1_4=[csv | sql | json | xml | text] : exactly one of the values specifying the data format of the file
param1_5=(format-specific-params) : optional extra parameters related to the specific format selected. Example usecase is specifying a custom delimiter for csv format

command2=load-data <ds-name>.<collection-name> <file | url> csv (element-delimiter)
description2=loads csv data from the specified file or url into the specified collection
param2_1=<ds-name> : name of an existing datastore
param2_2=<ds-collection> : name of an existing collection
param2_3=<file | url> : absolute file system path, or public url of data file
param2_4=(element-delimiter) : optional paramter to specify custom element delimeter. ',' considered as delimiter if none specified, with \n as a row delimiter

command3=load-data <ds-name>.<collection-name> <file> csv (element-delimiter) (line-delimiter)

command4=load-data <ds-name>.<collection-name> <file> text ([none] | delimiter)

[exit]
command1=exit
description=Closes the console