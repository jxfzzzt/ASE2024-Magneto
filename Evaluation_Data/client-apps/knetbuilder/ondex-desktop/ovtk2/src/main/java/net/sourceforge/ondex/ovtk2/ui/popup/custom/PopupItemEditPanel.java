package net.sourceforge.ondex.ovtk2.ui.popup.custom;

import java.io.FileNotFoundException;
import java.text.ParseException;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import net.sourceforge.ondex.ovtk2.ui.popup.custom.itemeditor.ItemEditHandler;

/**
 * This is a {@link JPanel} to edit the contents of a
 * {@link CustomPopupItemBean} object.<br>
 * Parts of this file were created using the Netbeans GUI editor.
 * 
 * @author Martin Rittweger
 */
public class PopupItemEditPanel extends javax.swing.JPanel implements ItemEditHandler {

	/**
	 * generated
	 */
	private static final long serialVersionUID = 8659453537209965269L;

	public static void main(String[] args) {
		JFrame frm = new JFrame();
		frm.add(new PopupItemEditPanel());
		frm.pack();
		frm.setVisible(true);

	}

	private JComponent customPopupCodeComponent = null;

	// soft linking to jedit.jar -- user needs to download that jar manually and
	// put it into lib/
	private void initJEditTextArea() {

		try {
			Class<?> classTextArea = Class.forName("org.gjt.sp.jedit.textarea.TextArea");
			Class<?> classStandaloneTextArea = Class.forName("org.gjt.sp.jedit.textarea.StandaloneTextArea");
			Class<?> classJEditBuffer = Class.forName("org.gjt.sp.jedit.buffer.JEditBuffer");
			Class<?> classMode = Class.forName("org.gjt.sp.jedit.Mode");
			Class<?> classModeProvider = Class.forName("org.gjt.sp.jedit.syntax.ModeProvider");

			customPopupCodeComponent = (JComponent) classStandaloneTextArea.getDeclaredMethod("createTextArea").invoke(null);
			// this is for:
			// customPopupCodeJEditTextArea.getBuffer().setProperty("folding",
			// "indent");
			classJEditBuffer.getMethod("setProperty", String.class, Object.class).invoke(classTextArea.getMethod("getBuffer").invoke(customPopupCodeComponent), "folding", "indent");
			Object mode = classMode.getConstructor(String.class).newInstance("javascript");
			classMode.getMethod("setProperty", String.class, Object.class).invoke(mode, "file", "modes/javascript.xml");
			// this is for ModeProvider.instance.addMode(mode);
			classModeProvider.getMethod("addMode", classMode).invoke(classModeProvider.getDeclaredField("instance").get(null), mode);
			// this is for:
			// customPopupCodeJEditTextArea.getBufer().setMode(mode);
			classJEditBuffer.getMethod("setMode", classMode).invoke(classTextArea.getMethod("getBuffer").invoke(customPopupCodeComponent), mode);
			customPopupCodeScrollPane.setViewportView(customPopupCodeComponent);

			customPopupCodeComponent.addKeyListener(new java.awt.event.KeyAdapter() {
				public void keyTyped(java.awt.event.KeyEvent evt) {
					customPopupCodeKeyTyped(evt);
				}
			});

		} catch (ClassNotFoundException e) {
			// class not found: JTextArea customPopupCode is default.
			JOptionPane.showMessageDialog(this, "For editing with undo, syntax highlighting and bracket matching,\n" + "it is recommendet download JEdit (www.jedit.org). Put jedit.jar into the lib/ folder and\n" + "add the modes/ folder provided with JEdit into the ondex root folder.\n" + "A primitive text area is used now.");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void setCodeText(String code) {
		if (customPopupCodeComponent == null) {
			customPopupCode.setText(code);
		} else {
			try {
				Class.forName("org.gjt.sp.jedit.textarea.TextArea").getMethod("setText", String.class).invoke(customPopupCodeComponent, code);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private String getCodeText() {
		if (customPopupCodeComponent == null) {
			return customPopupCode.getText();
		}
		try {
			return (String) Class.forName("org.gjt.sp.jedit.textarea.TextArea").getMethod("getText").invoke(customPopupCodeComponent);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/** Creates new form PopupItemEditPanel */
	public PopupItemEditPanel() {
		initComponents();
		initJEditTextArea();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel6 = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		conceptClassesTextField = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		librariesTextField = new javax.swing.JTextField();
		jPanel7 = new javax.swing.JPanel();
		customPopupCodeScrollPane = new javax.swing.JScrollPane();
		customPopupCode = new javax.swing.JTextArea();

		setLayout(new java.awt.BorderLayout());

		jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

		jLabel2.setText("show this popup item for these ConceptClasses (CC):");

		conceptClassesTextField.setToolTipText("Use comma ( , ) to separate different Concept Classes. Leave empty to allow all Concept Classes.");
		conceptClassesTextField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				conceptClassesTextFieldKeyTyped(evt);
			}
		});

		jLabel1.setText("libraries");

		javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(conceptClassesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE).addGroup(jPanel6Layout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(librariesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)).addComponent(jLabel2)).addContainerGap()));
		jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(conceptClassesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(11, 11, 11).addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(librariesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		add(jPanel6, java.awt.BorderLayout.NORTH);

		customPopupCode.setColumns(20);
		customPopupCode.setRows(5);
		customPopupCode.setText("// this script will be executed when the popup menu item was chosen\n// this code could as well be executed using the console\n// here is a number of code snippets to give you a start\n\np = new PathParser(\n\tgetActiveGraph(),\n\tnew DelimitedFileReader(\"D:/workspace/core/data/importdata/Uniprot2AGI.tab\", \" \"));\np.newConceptPrototype(\n\tdefCC(\"Protein\"),\n\tdefAccession(0, \"UNIPROTKB\"),\n\tdefAccession(1, \"TAIR\"));\np.setProcessingOptions();\n\n// receive the set of selected nodes and edges and read their GDS\nconcept = getPickedConcepts().toArray()[0];\nname = getActiveGraph().getMetaData().getAttributeName(\"TAXID\");\nconcept.getGDS(name.unwrap()).getValue();"); // NOI18N
		customPopupCode.setToolTipText("Use JavaScript. See scripting_ref.htm for a reference.");
		customPopupCode.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				customPopupCodeKeyTyped(evt);
			}
		});
		customPopupCodeScrollPane.setViewportView(customPopupCode);

		javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
		jPanel7.setLayout(jPanel7Layout);
		jPanel7Layout.setHorizontalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 696, Short.MAX_VALUE).addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(customPopupCodeScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)));
		jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 408, Short.MAX_VALUE).addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(customPopupCodeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)));

		add(jPanel7, java.awt.BorderLayout.CENTER);
	}// </editor-fold>//GEN-END:initComponents

	private void conceptClassesTextFieldKeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_conceptClassesTextFieldKeyTyped
		changed = true;
	}// GEN-LAST:event_conceptClassesTextFieldKeyTyped

	private void customPopupCodeKeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_customPopupCodeKeyTyped
		changed = true;
	}// GEN-LAST:event_customPopupCodeKeyTyped

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField conceptClassesTextField;
	private javax.swing.JTextArea customPopupCode;
	private javax.swing.JScrollPane customPopupCodeScrollPane;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JTextField librariesTextField;

	// End of variables declaration//GEN-END:variables

	@Override
	public String[] getItemNames() {
		return CustomPopupItemBean.getAvailablePopupItemNames();
	}

	CustomPopupItemBean customPopupItem = null;

	@Override
	public void loadItem(String name) throws FileNotFoundException, ParseException {
		try {
			customPopupItem = CustomPopupItemBean.loadXML(name + ".xml");
		} catch (java.util.NoSuchElementException e) {
			e.printStackTrace();
			throw new ParseException(e.getMessage(), -1);
		}
		Data2Panel();
	}

	boolean changed;

	@Override
	public boolean isChanged() {
		return customPopupItem != null && changed;
	}

	@Override
	public void saveItem() throws FileNotFoundException {
		Panel2Data();
		customPopupItem.saveXML();
	}

	@Override
	public void newItem(String name) {
		customPopupItem = new CustomPopupItemBean();
		customPopupItem.setName(name);
		Data2Panel();
	}

	private void Data2Panel() {
		conceptClassesTextField.setText(customPopupItem.getConceptClasses());
		librariesTextField.setText(customPopupItem.getLibraries());
		setCodeText(customPopupItem.getCode());
	}

	private void Panel2Data() {
		customPopupItem.setConceptClasses(conceptClassesTextField.getText());
		customPopupItem.setLibraries(librariesTextField.getText());
		customPopupItem.setCode(getCodeText());
	}

	@Override
	public void deleteItem() {
		customPopupItem.delete();
	}

	@Override
	public void setChanged(boolean changed) {
		this.changed = changed;
	}

	@Override
	public Object getItemName() {
		return customPopupItem != null ? customPopupItem.getName() : null;
	}

	@Override
	public void clearItem() {
		customPopupItem = null;
	}

}
