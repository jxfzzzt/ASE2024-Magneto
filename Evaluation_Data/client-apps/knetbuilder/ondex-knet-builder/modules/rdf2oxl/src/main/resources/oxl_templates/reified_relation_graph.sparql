CONSTRUCT
{
  ?reifiedRel
		bk:relFrom ?from;
		bk:relTo ?to; 
		bk:_typeId ?typeId;
		bk:relatedConcept ?relatedConcept;
    bk:evidence ?evidence;		
		bk:_attribute ?attribIri
	.
	
  ?evidence
    rdf:type bk:EvidenceType;
		dcterms:identifier ?evId;
    rdfs:label ?evLabel;
  	dcterms:description ?evDescription
	.
	
  ?attribIri
		rdf:type bk:_AttributeValue;
    bk:_attribType ?attribId;
		bk:_attribLexValue ?attribLexValue;
    bk:_attribXsd ?attribXsd;
		bk:isIndexed ?attribIsIndexed;
		bk:ondexRange ?ondexRange
  .
}
WHERE
{
	VALUES ( ?reifiedRel ) {
	  $resourceIris
	} 

	?reifiedRel
		bk:relFrom ?from;
		bk:relTo ?to; 
		bk:relTypeRef ?type
	.
	
	# TODO: there are some without ID
	?type dcterms:identifier ?typeId.
	
	# Tags
  OPTIONAL { ?reifiedRel bk:relatedConcept ?relatedConcept }

	# Evidence
  OPTIONAL { 
  	?reifiedRel bk:evidence ?evidence. 
		?evidence dcterms:identifier ?evId.
		
    OPTIONAL { ?evidence rdfs:label ?evLabel }
  	OPTIONAL { ?evidence dcterms:description ?evDescription }
  }	
	
	# Attributes
	{
		?reifiedRel ?attribProp ?attribValue.

		?attribProp rdfs:subPropertyOf* bk:attribute;
		            dcterms:identifier ?attribId.

		FILTER ( ?attribProp != bka:iri ) # if already here, we'd better trust our own generated URI.  		            
	}
	UNION {
		# See concept_graph.sparql for an explanation about OXL's iri attribute.	
		#
		?reifiedRel rdf:type ?conceptClass.
		BIND ( 'iri' AS ?attribId )
		BIND ( bka:iri AS ?attribProp )
		BIND ( STR ( ?reifiedRel ) AS ?attribValue )
	}
		            
	OPTIONAL { ?attribProp rdfs:range ?attribRange } 
	OPTIONAL { ?attribProp bk:isIndexed ?attribIsIndexed. FILTER ( xsd:boolean ( ?attribIsIndexed ) ) }
	OPTIONAL { ?attribProp bk:ondexRange ?ondexRange. } 

	BIND ( STR ( ?attribValue ) AS ?attribLexValue )
	BIND ( STR ( DATATYPE ( ?attribValue ) ) AS ?_attribXsd )
	
	# xsd:string is generic and range takes priority in that case. 
	BIND ( IF ( ?_attribXsd != xsd:string, ?_attribXsd, STR ( ?attribRange ) ) AS ?attribXsd )
	
	# Let's define an attribute as an object with IRI
	BIND ( MD5 ( CONCAT ( STR ( ?reifiedRel ), STR ( ?attribProp ), STR ( ?attribValue ) ) ) AS ?attribHash )
	BIND ( IRI ( CONCAT ( STR ( bk:_attrib_ ), ?attribHash ) ) AS ?attribIri )	
}