<#-- 

	Returns an array out of the parameter, putting it into an array if it's a singleton 

-->
<#function to_seq object>
  <#return (object?is_string || !object?is_enumerable)?then ( [ object ], object )>
</#function>
<#-- 
	
  Builds an index out of an object sequence
  TODO: never used!
-->
<#function seq_index seq key_prop>
	<#local result = {}>
	<#list seq as item>
		<#local result += { result [ key_prop ]: item }>
	</#list>
</#function>
<#-- 
  
  Often used for main properties of metadata entities (eg, concept classes, evidence 

-->
<#macro render_metadata m>
				<id>${m.identifier}</id>
			<#noautoesc>
				<fullname><![CDATA[${(m.label[ '@value' ])!''}]]></fullname>
				<description><![CDATA[${(m.description[ '@value' ])!''}]]></description>
			</#noautoesc>
</#macro>
<#-- 

	Renders common stuff about concepts and relations 

-->
<#--
	Renders concepts generically related to a concept or a relation, what is named contexts in Ondex.

  The first way doesn't work, the OXL parser seems broken. Second way seems to be still supported from an
  old version of OXL spec.
  
-->
<#macro render_related_concepts e>
	<#if !e.relatedConcept??><#return /></#if>
	<#assign context_ids = "" />
	<#assign sep = "" />
	<#list to_seq ( e.relatedConcept ) as related_concept_iri>
		<#assign context_ids += sep + conceptIds [ NamespaceUtils.iriAny ( related_concept_iri ) ] />
		<#assign sep = "," />
	</#list>
					<context>${context_ids}</context>
</#macro>
<#macro render_evidences e>
	<#if !e.evidence??>
						<evidences/>
		<#return />
	</#if>
	<#if !evidence_types??>
		<#global evidence_types = JsonUtils.indexJsonLdTypes ( js, "EvidenceType", "bk:EvidenceType" ) />
	</#if>
						<evidences>
							<#-- More mess in the OXL parser: it doesn't support idRef for evidences... -->
							<#list to_seq ( e.evidence ) as evidence_iri>
								<evidence>
									<@render_metadata evidence_types [ evidence_iri ] />
								</evidence>
							</#list>
						</evidences>
</#macro>
<#macro render_data_source e>
		<#if !data_sources??>
			<#global data_sources = JsonUtils.indexJsonLdTypes ( js, "DataSource", "bk:DataSource" ) />
		</#if>
			<#assign ds_id = (e.dataSource)!'unknown'/>
			<#if ds_id != 'unknown'>
				<#assign ds_id = data_sources [ ds_id ].identifier />
			</#if>
						<elementOf><idRef>${ds_id}</idRef></elementOf>
</#macro>
<#macro render_attribute_values e group_xml_tag entry_xml_tag>
	<#if !e._attribute??>
		<#-- This is mandatory, the parser expects it even when there is no attribute inside. -->	
		<${group_xml_tag}/>
		<#return />
	</#if>
	<#if !attribute_values??>
			<#global attribute_values = JsonUtils.indexJsonLdTypes ( js, "_AttributeValue", "bk:_AttributeValue" ) />
	</#if>
	<#--  
	
		We must group multi-value attributes too, this way:
		attr._attribType => [ { xsd: attrib._attribXsd, lexValue: attrib._attribLexValue } ]
		
		from an object like:
			rdf:type bk:_AttributeValue;
	    bk:_attribType ?attribId;
			bk:_attribLexValue ?attribLexValue;
	    bk:_attribXsd ?attribXsd;
	    bk:attribIsIndexed ?isAttribIndexed				
	-->
	<#local grouped_values = {}>
	<#list to_seq ( e._attribute ) as attr_iri>
	  <#local attr = attribute_values [ attr_iri ] /> 
	  <#local entry = (grouped_values [ attr._attribType ])![] />
	  <#-- 
	    java.lang.Object is meaningless and probably an error (how can one rebuild a specific object out of it?
	    so, let's get rid of such a case by falling back to the default (string). 
	  -->
	  <#local java_class = ( (attr.ondexRange)?? && attr.ondexRange != 'java.lang.Object' )?then ( attr.ondexRange, '' ) />
	  <#local entry += [{ 
	  	'xsd': attr._attribXsd, 'lex_value': attr._attribLexValue, 
	  	'is_indexed': (attr.attribIsIndexed)!false,
	  	'java_class': java_class 
	  }]/>
	  <#local grouped_values += { attr._attribType: entry } />
	</#list>
	<#-- 
	
		OK, ready for rendering now
		
	-->
	<${group_xml_tag}>
		<#list grouped_values as attr_type, attr_entries>
			<${entry_xml_tag}>
				<attrname><idRef>${attr_type}</idRef></attrname>
				<#-- java.util.* is usually a collection, which we translate always as set -->
				<#if attr_entries?size == 1 && !((attr_entries [ 0 ].java_class)!'')?starts_with ( "java.util." )>
					<#-- 
						Single value goes into a value element
					-->
					<#local attr_entry = attr_entries [ 0 ] />
					<#local attr_java_val = XsdMapper.javaValueWithDefault ( attr_entry.xsd, attr_entry.lex_value ) />
					<#local attr_java_class = (attr_entry.java_class != '')?then (
						attr_entry.java_class, attr_java_val.getClass().getCanonicalName() 
					)>
					<#-- DO NOT BREAK IT INTO MULTIPLE LINES. The OXL parser has issues with attribute values -->
					<value java_class="${attr_java_class}"><literal><![CDATA[${attr_entry.lex_value}]]></literal></value>
				<#else>
					<#-- 
						Multi-values need to be wrapped into an holder, we support set holder only, original holders of
					  other type (list, map) are lost 
					-->
					<#-- DO NOT CHANGE THE FORMATTING! The OXL parser has issues with attribute values -->
			    <value java_class="net.sourceforge.ondex.export.oxl.CollectionHolder"
			      ><literal clazz="java.util.HashSet"><item
				        ><#list attr_entries as attr_entry><values
			        		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
			        		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			        		xsi:type="${attr_entry.xsd?replace ( "http://www.w3.org/2001/XMLSchema#", "xsd:")}"
			        	><![CDATA[${attr_entry.lex_value}]]></values
			          ></#list></item></literal></value>
				</#if>
			  <#-- 
			  	Since they are defined at the attr type level, they're the same for all values.
			  	We report this attribute to the template only when it's true.
			  	We have to report false values too, since the OXL parser makes this attrib mandatory.
			  -->
					<doindex>${(attr_entries [ 0 ].is_indexed)?then('true','false')}</doindex>
			</${entry_xml_tag}>
		</#list><#-- grouped_values -->
	</${group_xml_tag}>
</#macro>
