/**
 *
 * Copyright (c) 2016 Dotweblabs Web Technologies and others. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *  __            __       __
 * |  |_.--.--.--|__.-----|  |
 * |   _|  |  |  |  |   --|  |_
 * |____|________|__|___| |____|
 * :: twirl :: Object Mapping ::
 *
 */
package com.dotweblabs.twirl;

import com.dotweblabs.twirl.annotations.Id;
import com.dotweblabs.twirl.common.AutoGenerateStringIdException;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class AutoGeneratedIdTest extends LocalDatastoreTestBase {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    public static class HasStringKey {
        @Id
        String keyField;
    }

    public static class HasIntKey {
        @Id
        int keyField;
    }

    public static class HasLongKey {
        @Id
        Long keyField;
    }

    public static class HasStringKeyWithPrefix {
        @Id(prefix = "test")
        String keyField;
    }

    @Test
    public void missingStringFieldWithPrefix()
    {
        ObjectStore store = new GaeObjectStore();

        HasStringKeyWithPrefix hasNullKey = new HasStringKeyWithPrefix();
        store.put(hasNullKey);

        Assert.assertNotNull(hasNullKey.keyField);
        Assert.assertTrue(hasNullKey.keyField.startsWith("test"));

        HasStringKeyWithPrefix saved = store.get(HasStringKeyWithPrefix.class, hasNullKey.keyField);
        Assert.assertNotNull(saved);
    }

    @Test(expected = AutoGenerateStringIdException.class)
    public void missingStringField()
    {
        ObjectStore store = new GaeObjectStore();

        HasStringKey hasNullKey = new HasStringKey();
        store.put(hasNullKey);

        Assert.assertNotNull(hasNullKey.keyField);
    }

    // TODO: Integer key not yet supported!
    //@Test
    public void missingIntField()
    {
        ObjectStore store = new GaeObjectStore();

        HasIntKey hasNullKey = new HasIntKey();
        store.put(hasNullKey);

        Assert.assertTrue(hasNullKey.keyField > 0);
    }

    @Test
    public void missingLongField()
    {
        ObjectStore store = new GaeObjectStore();

        HasLongKey hasNullKey = new HasLongKey();
        store.put(hasNullKey);

        Assert.assertNotNull(hasNullKey.keyField);
    }

}
